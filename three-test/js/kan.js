'use strict';
var _slicedToArray = function() {
    function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for (var _i = arr[Symbol.iterator](), _s; ! (_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch(err) {
            _d = true;
            _e = err;
        } finally {
            try {
                if (!_n && _i["return"]) _i["return"]();
            } finally {
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    return function(arr, i) {
        if (Array.isArray(arr)) {
            return arr;
        } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
        } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
    };
} ();
var _createClass = function() {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
} ();
function _classCallCheck(instance, Constructor) {
    if (! (instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
var clock = new THREE.Clock();
THREE.Cache.enabled = true;
var CANON_FIXED_TIME_STEP = 1.0 / 60.0;
var CANNON_MAX_SUB_STEPS = 1;
var CANNON_SOLVER_ITERATIONS = 10;
var FRUSTRUM_SIZE = 9;
var CAMERA_FAR = 20;
var HIDE_HINT_ENTROPY = 25;
var MAX_ENTROPY = [25, 40, 70, 100];
var ENTROPY_PER_SHAKE = 10;
var MIN_DISTANCE_PER_SHAKE = 5;
var GIFT_DAMPING = .1;
var GIFT_IMPULSE_F = 1000 * 0.8;
var SANTA_SCALE = 1.5;
var SANTA_SHOW_HIT_AREAS = false;
var LEVEL_COMPLETED = 4;
var ASSETS = {};
var mouseConstraint = void 0;
var stripedTexture = void 0;
var dotsTexture = void 0;
var MATERIALS = {};
var MAX_ANISOTROPY = 1;
var oddFrame = true;
var RagdollSanta = function() {
    function RagdollSanta(assets, ui, datGui) {
        _classCallCheck(this, RagdollSanta);
        ASSETS = this.assets = assets;
        this.ui = ui;
        this.gui = datGui;
        this.debugEl = document.querySelector('.js-debug');
        this.hintEl = document.querySelector('.js-game-hint');
        this.hintIconEl = this.hintEl.querySelector('.js-icon');
        var tooltipAnimation = {
            "v": "5.4.1",
            "fr": 47.6280059814453,
            "ip": 0,
            "op": 166.000020847399,
            "w": 71,
            "h": 36,
            "nm": "Comp 4",
            "ddd": 0,
            "assets": [],
            "layers": [{
                "ddd": 0,
                "ind": 1,
                "ty": 4,
                "nm": "open ",
                "sr": 1,
                "ks": {
                    "o": {
                        "a": 1,
                        "k": [{
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 20,
                            "s": [100],
                            "e": [0]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 21,
                            "s": [0],
                            "e": [0]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 138,
                            "s": [0],
                            "e": [100]
                        },
                        {
                            "t": 139.000017456557
                        }],
                        "ix": 11
                    },
                    "r": {
                        "a": 0,
                        "k": 0,
                        "ix": 10
                    },
                    "p": {
                        "a": 0,
                        "k": [34.738, 18.162, 0],
                        "ix": 2
                    },
                    "a": {
                        "a": 0,
                        "k": [11, 11.5, 0],
                        "ix": 1
                    },
                    "s": {
                        "a": 0,
                        "k": [110, 110, 100],
                        "ix": 6
                    }
                },
                "ao": 0,
                "shapes": [{
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[ - 0.09, 0.261], [ - 0.259, -0.09], [0, 0], [ - 0.021, 0.039], [0.476, 1.808], [1.648, 0.946], [1.984, -3.347], [0, 0], [0, 0], [1.156, -0.342], [0.286, -0.531], [ - 0.169, -0.557], [0, 0], [0, 0], [0.171, -0.471], [ - 0.988, -0.36], [0, 0], [ - 0.461, 0.215], [ - 0.174, 0.478], [0.111, 0.385], [0, 0]],
                                "o": [[0.09, -0.26], [0, 0], [2.282, -2.358], [0.957, -1.614], [ - 0.481, -1.83], [ - 3.399, -1.954], [0, 0], [0, 0], [ - 0.402, -1.041], [ - 0.58, 0.172], [ - 0.279, 0.518], [0, 0], [0, 0], [ - 0.452, 0.217], [ - 0.359, 0.989], [0, 0], [0.475, 0.173], [0.461, -0.215], [0.14, -0.381], [0, 0], [ - 0.262, -0.09]],
                                "v": [[ - 3.68, 4.964], [ - 3.044, 4.656], [4.065, 7.115], [8.442, 0.988], [9.184, -4.314], [5.883, -8.62], [ - 3.883, -6.094], [ - 4.983, -4.141], [ - 5.365, -5.131], [ - 7.979, -6.753], [ - 9.322, -5.663], [ - 9.491, -3.997], [ - 7.202, 3.512], [ - 7.59, 3.699], [ - 8.557, 4.766], [ - 7.417, 7.212], [1.336, 10.4], [2.792, 10.335], [3.776, 9.26], [3.81, 8.085], [ - 3.37, 5.6]],
                                "c": true
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "fl",
                        "c": {
                            "a": 0,
                            "k": [1, 1, 1, 1],
                            "ix": 4
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 5
                        },
                        "r": 1,
                        "nm": "Fill 1",
                        "mn": "ADBE Vector Graphic - Fill",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [10.678, 10.686],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 1",
                    "np": 2,
                    "cix": 2,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[2.282, -2.358], [0, 0], [0.09, -0.26], [ - 0.261, -0.09], [0, 0], [0.14, -0.381], [0.461, -0.215], [0.475, 0.173], [0, 0], [0, 0], [ - 0.359, 0.989], [ - 0.452, 0.217], [0, 0], [0, 0], [ - 0.279, 0.518], [ - 0.58, 0.172], [ - 0.402, -1.041], [0, 0], [0, 0], [ - 3.399, -1.954], [ - 0.481, -1.83], [0.957, -1.615]],
                                "o": [[0, 0], [ - 0.259, -0.09], [ - 0.09, 0.261], [0, 0], [0.11, 0.385], [ - 0.174, 0.479], [ - 0.461, 0.216], [0, 0], [0, 0], [ - 0.988, -0.36], [0.171, -0.471], [0, 0], [0, 0], [ - 0.17, -0.557], [0.285, -0.531], [1.156, -0.341], [0, 0], [0, 0], [1.984, -3.347], [1.648, 0.946], [0.476, 1.808], [ - 0.022, 0.039]],
                                "v": [[4.066, 7.115], [ - 3.044, 4.656], [ - 3.68, 4.965], [ - 3.37, 5.6], [3.811, 8.085], [3.777, 9.26], [2.792, 10.335], [1.337, 10.4], [1.253, 10.37], [ - 7.417, 7.212], [ - 8.557, 4.766], [ - 7.589, 3.699], [ - 7.202, 3.512], [ - 9.49, -3.997], [ - 9.322, -5.663], [ - 7.979, -6.753], [ - 5.365, -5.13], [ - 4.982, -4.141], [ - 3.882, -6.094], [5.883, -8.62], [9.184, -4.314], [8.443, 0.988]],
                                "c": true
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "fl",
                        "c": {
                            "a": 0,
                            "k": [0.286274522543, 0.286274522543, 0.286274522543, 1],
                            "ix": 4
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 5
                        },
                        "r": 1,
                        "nm": "Fill 1",
                        "mn": "ADBE Vector Graphic - Fill",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [10.678, 10.686],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 2",
                    "np": 2,
                    "cix": 2,
                    "ix": 2,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[0.544, 2.07], [1.881, 1.08], [2.266, -3.824], [0, 0], [1.379, -0.405], [0.413, -0.767], [ - 0.248, -0.814], [0, 0], [0.211, -0.58], [ - 1.506, -0.549], [0, 0], [ - 0.305, 0], [ - 0.391, 0.183], [ - 0.264, 0.728], [0.166, 0.585], [ - 0.082, 0.149]],
                                "o": [[ - 0.551, -2.091], [ - 3.871, -2.225], [0, 0], [ - 0.738, -1.049], [ - 0.839, 0.247], [ - 0.407, 0.755], [0, 0], [ - 0.504, 0.341], [ - 0.548, 1.507], [0, 0], [0.297, 0.098], [0.419, 0], [0.703, -0.328], [0.211, -0.578], [2.375, -2.452], [1.088, -1.834]],
                                "v": [[10.237, -4.983], [6.466, -9.901], [ - 4.663, -7.009], [ - 4.804, -6.759], [ - 8.177, -8.126], [ - 10.117, -6.552], [ - 10.363, -4.12], [ - 8.315, 2.599], [ - 9.411, 4.009], [ - 7.674, 7.736], [1.166, 10.955], [2.073, 11.101], [3.3, 10.827], [4.8, 9.188], [4.867, 7.402], [9.394, 1.07]],
                                "c": true
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "fl",
                        "c": {
                            "a": 0,
                            "k": [0.286274522543, 0.286274522543, 0.286274522543, 1],
                            "ix": 4
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 5
                        },
                        "r": 1,
                        "nm": "Fill 1",
                        "mn": "ADBE Vector Graphic - Fill",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [10.594, 11.101],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 3",
                    "np": 4,
                    "cix": 2,
                    "ix": 3,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }],
                "ip": 0,
                "op": 714.000089668933,
                "st": 0,
                "bm": 0
            },
            {
                "ddd": 0,
                "ind": 2,
                "ty": 3,
                "nm": "close",
                "sr": 1,
                "ks": {
                    "o": {
                        "a": 0,
                        "k": 100,
                        "ix": 11
                    },
                    "r": {
                        "a": 1,
                        "k": [{
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 24,
                            "s": [0],
                            "e": [ - 20]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 48,
                            "s": [ - 20],
                            "e": [2]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.167],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p167_0"],
                            "t": 72,
                            "s": [2],
                            "e": [ - 20]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 95,
                            "s": [ - 20],
                            "e": [2]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 99,
                            "s": [2],
                            "e": [ - 20]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 103,
                            "s": [ - 20],
                            "e": [2]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 107,
                            "s": [2],
                            "e": [ - 20]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 111,
                            "s": [ - 20],
                            "e": [2]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 115,
                            "s": [2],
                            "e": [ - 20]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.167],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p167_0"],
                            "t": 119,
                            "s": [ - 20],
                            "e": [2]
                        },
                        {
                            "i": {
                                "x": [0.667],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.333],
                                "y": [0]
                            },
                            "n": ["0p667_1_0p333_0"],
                            "t": 123,
                            "s": [2],
                            "e": [ - 20]
                        },
                        {
                            "i": {
                                "x": [0.833],
                                "y": [1]
                            },
                            "o": {
                                "x": [0.167],
                                "y": [0]
                            },
                            "n": ["0p833_1_0p167_0"],
                            "t": 127,
                            "s": [ - 20],
                            "e": [0]
                        },
                        {
                            "t": 135.00001695421
                        }],
                        "ix": 10
                    },
                    "p": {
                        "s": true,
                        "x": {
                            "a": 1,
                            "k": [{
                                "i": {
                                    "x": [0.689],
                                    "y": [0.995]
                                },
                                "o": {
                                    "x": [0.02],
                                    "y": [0.167]
                                },
                                "n": ["0p689_0p995_0p02_0p167"],
                                "t": 24,
                                "s": [35.906],
                                "e": [27.5]
                            },
                            {
                                "i": {
                                    "x": [0.833],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [ - 0.003]
                                },
                                "n": ["0p833_1_0p308_-0p003"],
                                "t": 48,
                                "s": [27.5],
                                "e": [44.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [0.998]
                                },
                                "o": {
                                    "x": [0.167],
                                    "y": [0]
                                },
                                "n": ["0p689_0p998_0p167_0"],
                                "t": 72,
                                "s": [44.5],
                                "e": [27.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 95,
                                "s": [27.5],
                                "e": [44.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 99,
                                "s": [44.5],
                                "e": [27.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 103,
                                "s": [27.5],
                                "e": [44.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 107,
                                "s": [44.5],
                                "e": [27.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 111,
                                "s": [27.5],
                                "e": [44.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 115,
                                "s": [44.5],
                                "e": [27.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.167],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p167_0"],
                                "t": 119,
                                "s": [27.5],
                                "e": [44.5]
                            },
                            {
                                "i": {
                                    "x": [0.689],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.308],
                                    "y": [0]
                                },
                                "n": ["0p689_1_0p308_0"],
                                "t": 123,
                                "s": [44.5],
                                "e": [27.5]
                            },
                            {
                                "i": {
                                    "x": [0.833],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.167],
                                    "y": [ - 0.001]
                                },
                                "n": ["0p833_1_0p167_-0p001"],
                                "t": 127,
                                "s": [27.5],
                                "e": [35.9]
                            },
                            {
                                "t": 135.00001695421
                            }],
                            "ix": 3
                        },
                        "y": {
                            "a": 1,
                            "k": [{
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.02],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p02_0"],
                                "t": 24,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 48,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 95,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 99,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 103,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 107,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 111,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 115,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.167],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p167_0"],
                                "t": 119,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "i": {
                                    "x": [0.98],
                                    "y": [1]
                                },
                                "o": {
                                    "x": [0.021],
                                    "y": [0]
                                },
                                "n": ["0p98_1_0p021_0"],
                                "t": 123,
                                "s": [18.343],
                                "e": [18.343]
                            },
                            {
                                "t": 127.000015949516
                            }],
                            "ix": 4
                        }
                    },
                    "a": {
                        "a": 0,
                        "k": [11, 11.5, 0],
                        "ix": 1
                    },
                    "s": {
                        "a": 0,
                        "k": [100, 100, 100],
                        "ix": 6
                    }
                },
                "ao": 0,
                "ip": 0,
                "op": 714.000089668933,
                "st": 0,
                "bm": 0
            },
            {
                "ddd": 0,
                "ind": 3,
                "ty": 4,
                "nm": "cursor_animation_new Outlines",
                "parent": 2,
                "sr": 1,
                "ks": {
                    "o": {
                        "a": 0,
                        "k": 100,
                        "ix": 11
                    },
                    "r": {
                        "a": 0,
                        "k": 0,
                        "ix": 10
                    },
                    "p": {
                        "a": 0,
                        "k": [10.594, 11.157, 0],
                        "ix": 2
                    },
                    "a": {
                        "a": 0,
                        "k": [11, 11.5, 0],
                        "ix": 1
                    },
                    "s": {
                        "a": 0,
                        "k": [100, 100, 100],
                        "ix": 6
                    }
                },
                "ao": 0,
                "shapes": [{
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[0, 0], [0, 0]],
                                "o": [[0, 0], [0, 0]],
                                "v": [[0.574, -1.393], [ - 0.574, 1.393]],
                                "c": false
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "st",
                        "c": {
                            "a": 0,
                            "k": [0.286274522543, 0.286274522543, 0.286274522543, 1],
                            "ix": 3
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 4
                        },
                        "w": {
                            "a": 0,
                            "k": 1,
                            "ix": 5
                        },
                        "lc": 2,
                        "lj": 2,
                        "nm": "Stroke 1",
                        "mn": "ADBE Vector Graphic - Stroke",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [5.036, 5.27],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 1",
                    "np": 2,
                    "cix": 2,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[0, 0], [0, 0]],
                                "o": [[0, 0], [0, 0]],
                                "v": [[ - 3.854, -1.344], [3.854, 1.344]],
                                "c": false
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "st",
                        "c": {
                            "a": 0,
                            "k": [0.286274522543, 0.286274522543, 0.286274522543, 1],
                            "ix": 3
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 4
                        },
                        "w": {
                            "a": 0,
                            "k": 1,
                            "ix": 5
                        },
                        "lc": 2,
                        "lj": 1,
                        "ml": 10,
                        "ml2": {
                            "a": 0,
                            "k": 10,
                            "ix": 8
                        },
                        "nm": "Stroke 1",
                        "mn": "ADBE Vector Graphic - Stroke",
                        "hd": false
                    },
                    {
                        "ty": "fl",
                        "c": {
                            "a": 0,
                            "k": [1, 1, 1, 1],
                            "ix": 4
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 5
                        },
                        "r": 1,
                        "nm": "Fill 1",
                        "mn": "ADBE Vector Graphic - Fill",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [10.893, 16.793],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 2",
                    "np": 3,
                    "cix": 2,
                    "ix": 2,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[2.61, -2.569], [0.23, -0.627], [1.327, 0.487], [0, 0], [0, 0], [ - 0.486, 1.329], [ - 0.584, 0.278], [ - 1.127, 3.179], [ - 1.33, -0.26], [0, 0], [4.14, -7.363]],
                                "o": [[0.235, 0.572], [ - 0.486, 1.328], [0, 0], [0, 0], [ - 1.328, -0.488], [0.24, -0.655], [0, 0], [0.953, -2.688], [0, 0], [2.271, -5.788], [0, 0]],
                                "v": [[3.024, 8.7], [3.06, 10.558], [ - 0.225, 12.081], [ - 0.227, 12.08], [ - 9.536, 8.661], [ - 11.059, 5.371], [ - 9.754, 3.94], [ - 11.03, -2.515], [ - 6.372, -5.421], [ - 5.715, -6.78], [8.017, 1.839]],
                                "c": true
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "st",
                        "c": {
                            "a": 0,
                            "k": [0.286274522543, 0.286274522543, 0.286274522543, 1],
                            "ix": 3
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 4
                        },
                        "w": {
                            "a": 0,
                            "k": 1,
                            "ix": 5
                        },
                        "lc": 1,
                        "lj": 1,
                        "ml": 10,
                        "ml2": {
                            "a": 0,
                            "k": 10,
                            "ix": 8
                        },
                        "nm": "Stroke 1",
                        "mn": "ADBE Vector Graphic - Stroke",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [11.903, 9.494],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 3",
                    "np": 2,
                    "cix": 2,
                    "ix": 3,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[2.61, -2.569], [0.23, -0.627], [1.327, 0.487], [0, 0], [0, 0], [ - 0.486, 1.329], [ - 0.584, 0.278], [ - 1.127, 3.179], [ - 1.33, -0.26], [0, 0], [4.14, -7.363]],
                                "o": [[0.235, 0.572], [ - 0.486, 1.328], [0, 0], [0, 0], [ - 1.328, -0.488], [0.24, -0.655], [0, 0], [0.953, -2.688], [0, 0], [2.271, -5.788], [0, 0]],
                                "v": [[4.333, 7.163], [4.369, 9.021], [1.084, 10.544], [1.082, 10.543], [ - 8.227, 7.124], [ - 9.75, 3.834], [ - 8.445, 2.403], [ - 9.721, -4.052], [ - 5.063, -6.958], [ - 4.406, -8.317], [9.326, 0.302]],
                                "c": true
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "fl",
                        "c": {
                            "a": 0,
                            "k": [1, 1, 1, 1],
                            "ix": 4
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 5
                        },
                        "r": 1,
                        "nm": "Fill 1",
                        "mn": "ADBE Vector Graphic - Fill",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [10.594, 11.031],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 4",
                    "np": 4,
                    "cix": 2,
                    "ix": 4,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }],
                "ip": 0,
                "op": 714.000089668933,
                "st": 0,
                "bm": 0
            },
            {
                "ddd": 0,
                "ind": 4,
                "ty": 4,
                "nm": "arrow",
                "sr": 1,
                "ks": {
                    "o": {
                        "a": 0,
                        "k": 100,
                        "ix": 11
                    },
                    "r": {
                        "a": 0,
                        "k": 0,
                        "ix": 10
                    },
                    "p": {
                        "a": 0,
                        "k": [35.52, 18.465, 0],
                        "ix": 2
                    },
                    "a": {
                        "a": 0,
                        "k": [25.5, 4, 0],
                        "ix": 1
                    },
                    "s": {
                        "a": 0,
                        "k": [100, 100, 100],
                        "ix": 6
                    }
                },
                "ao": 0,
                "shapes": [{
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[0, 0], [0, 0], [0, 0]],
                                "o": [[0, 0], [0, 0], [0, 0]],
                                "v": [[ - 1.793, -3.546], [1.793, 0.039], [ - 1.714, 3.546]],
                                "c": false
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "st",
                        "c": {
                            "a": 0,
                            "k": [1, 1, 1, 1],
                            "ix": 3
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 4
                        },
                        "w": {
                            "a": 0,
                            "k": 1,
                            "ix": 5
                        },
                        "lc": 1,
                        "lj": 1,
                        "ml": 10,
                        "ml2": {
                            "a": 0,
                            "k": 10,
                            "ix": 8
                        },
                        "nm": "Stroke 1",
                        "mn": "ADBE Vector Graphic - Stroke",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [48.233, 3.535],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 1",
                    "np": 2,
                    "cix": 2,
                    "ix": 1,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[0, 0], [0, 0], [0, 0]],
                                "o": [[0, 0], [0, 0], [0, 0]],
                                "v": [[1.793, 3.546], [ - 1.793, -0.039], [1.714, -3.546]],
                                "c": false
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "st",
                        "c": {
                            "a": 0,
                            "k": [1, 1, 1, 1],
                            "ix": 3
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 4
                        },
                        "w": {
                            "a": 0,
                            "k": 1,
                            "ix": 5
                        },
                        "lc": 1,
                        "lj": 1,
                        "ml": 10,
                        "ml2": {
                            "a": 0,
                            "k": 10,
                            "ix": 8
                        },
                        "nm": "Stroke 1",
                        "mn": "ADBE Vector Graphic - Stroke",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [2.726, 3.535],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 2",
                    "np": 2,
                    "cix": 2,
                    "ix": 2,
                    "mn": "ADBE Vector Group",
                    "hd": false
                },
                {
                    "ty": "gr",
                    "it": [{
                        "ind": 0,
                        "ty": "sh",
                        "ix": 1,
                        "ks": {
                            "a": 0,
                            "k": {
                                "i": [[0, 0], [0, 0]],
                                "o": [[0, 0], [0, 0]],
                                "v": [[1.5, 3.561], [49.5, 3.561]],
                                "c": false
                            },
                            "ix": 2
                        },
                        "nm": "Path 1",
                        "mn": "ADBE Vector Shape - Group",
                        "hd": false
                    },
                    {
                        "ty": "st",
                        "c": {
                            "a": 0,
                            "k": [1, 1, 1, 1],
                            "ix": 3
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 4
                        },
                        "w": {
                            "a": 0,
                            "k": 1,
                            "ix": 5
                        },
                        "lc": 3,
                        "lj": 1,
                        "ml": 10,
                        "ml2": {
                            "a": 0,
                            "k": 10,
                            "ix": 8
                        },
                        "nm": "Stroke 1",
                        "mn": "ADBE Vector Graphic - Stroke",
                        "hd": false
                    },
                    {
                        "ty": "tr",
                        "p": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 2
                        },
                        "a": {
                            "a": 0,
                            "k": [0, 0],
                            "ix": 1
                        },
                        "s": {
                            "a": 0,
                            "k": [100, 100],
                            "ix": 3
                        },
                        "r": {
                            "a": 0,
                            "k": 0,
                            "ix": 6
                        },
                        "o": {
                            "a": 0,
                            "k": 100,
                            "ix": 7
                        },
                        "sk": {
                            "a": 0,
                            "k": 0,
                            "ix": 4
                        },
                        "sa": {
                            "a": 0,
                            "k": 0,
                            "ix": 5
                        },
                        "nm": "Transform"
                    }],
                    "nm": "Group 3",
                    "np": 2,
                    "cix": 2,
                    "ix": 3,
                    "mn": "ADBE Vector Group",
                    "hd": false
                }],
                "ip": 0,
                "op": 714.000089668933,
                "st": 0,
                "bm": 0
            }],
            "markers": []
        };
        var config = {
            container: this.hintIconEl,
            renderer: 'svg',
            loop: true,
            autoplay: false,
            rendererSettings: {
                progressiveLoad: false
            },
            animationData: tooltipAnimation
        };
        this.hintAnimation = bodymovin.loadAnimation(config);
        this.objLoader = new THREE.OBJLoader();
        this.objectLoader = new THREE.ObjectLoader();
        this.meshes = [];
        this.giftMeshes = [];
        this.gifts = [];
        this.intersects = [];
        this.animate = this.animate.bind(this);
        this.onMouseMove = this.onMouseMove.bind(this);
        this.onMouseDown = this.onMouseDown.bind(this);
        this.onMouseUp = this.onMouseUp.bind(this);
        this.onWindowResize = debounce(this.onWindowResize.bind(this), 500);
        this.clock = new THREE.Clock();
        this.isRunning = false;
        this.isRunningSpring = false;
        this._isSantaDestroyed = false;
        this.giftCount = 0;
        this.entropy = 0;
        this.elGiftCount = document.querySelector('.giftCount');
        this.level = 0;
        this.topVector = new THREE.Vector3();
        this.dollHeadVector = new THREE.Vector3();
        this.initMaterials();
        this.initScene();
        this.setupPhysics();
        this.createMeshes();
        this._poolGifts();
        this.initLights();
        this.initControls();
        this.initDebug();
        datGui && this.initDatGUI();
        window.addEventListener('resize', this.onWindowResize, false);
        this.animate(1);
    }
    _createClass(RagdollSanta, [{
        key: 'start',
        value: function start() {
            var _this = this;
            this.isRunning = true;
            this.animate(2);
            setTimeout(function() {
                _this.isRunningSpring = true;
                setTimeout(function() {
                    _this.blink();
                },
                1000);
                _this.hintTimer = setTimeout(function() {
                    _this.showHint();
                },
                3000);
            },
            500);
            window.addEventListener("mousemove", this.onMouseMove, {
                passive: true
            });
            window.addEventListener("touchmove", this.onMouseMove, {
                passive: true
            });
            window.addEventListener("mousedown", this.onMouseDown, false);
            window.addEventListener("touchstart", this.onMouseDown, false);
            window.addEventListener("mouseup", this.onMouseUp, false);
            window.addEventListener("touchend", this.onMouseUp, false);
        }
    },
    {
        key: 'initMaterials',
        value: function initMaterials() {
            MATERIALS = this.materials = {};
            this.materials.white = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: 0xffffff
            });
            this.materials.shoe = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.shoeColor),
                emissive: new THREE.Color().setStyle(settings.shoeEmissive),
                side: THREE.DoubleSide
            });
            this.materials.nose = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.noseColor),
                emissive: new THREE.Color().setStyle(settings.noseEmissive)
            });
            this.materials.hat = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.hatColor),
                emissive: new THREE.Color().setStyle(settings.hatEmissive)
            });
            this.materials.body = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.bodyColor),
                emissive: new THREE.Color().setStyle(settings.bodyEmissive)
            });
            this.materials.arms = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.armsColor)
            });
            this.materials.legs = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.legsColor)
            });
            this.materials.hands = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: new THREE.Color().setStyle(settings.handsColor),
                emissive: new THREE.Color().setStyle(settings.handsEmissive)
            });
            this.materials.mask = this.materials.shoe;
            this.materials.eyes = new THREE.MeshStandardMaterial({
                metalness: settings.metalness,
                roughness: settings.roughness,
                color: 0xffffff,
                emissive: 0xffffff,
                side: THREE.DoubleSide
            });
            this.materials.giftSmallBox = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.smallBoxColor),
                emissive: new THREE.Color().setStyle(settings.smallBoxEmissive)
            });
            this.materials.giftSmallLid = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.smallLidColor),
                emissive: new THREE.Color().setStyle(settings.smallLidEmissive)
            });
            this.materials.giftMediumBox = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.mediumBoxColor),
                emissive: new THREE.Color().setStyle(settings.mediumBoxEmissive)
            });
            this.materials.giftMediumLid = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.mediumLidColor),
                emissive: new THREE.Color().setStyle(settings.mediumLidEmissive)
            });
            this.materials.giftStripedBox = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.stripedBoxColor),
                emissive: new THREE.Color().setStyle(settings.stripedBoxEmissive)
            });
            this.materials.giftStripedLid = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.stripedLidColor),
                emissive: new THREE.Color().setStyle(settings.stripedLidEmissive)
            });
            this.materials.giftDottedBox = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.dottedBoxColor),
                emissive: new THREE.Color().setStyle(settings.dottedBoxEmissive)
            });
            this.materials.giftDottedLid = new THREE.MeshLambertMaterial({
                color: new THREE.Color().setStyle(settings.dottedLidColor),
                emissive: new THREE.Color().setStyle(settings.dottedLidEmissive)
            });
        }
    },
    {
        key: 'createSprites',
        value: function createSprites() {
            var spriteMap = new THREE.TextureLoader().load("https://cdn.glitch.com/4998919d-320e-4554-8acd-ce47fbd96994%2Fhono.png?1544368484166");
            spriteMap.anisotropy = 0;
            spriteMap.magFilter = THREE.NearestFilter;
            spriteMap.minFilter = THREE.NearestFilter;
            var spriteMaterial = new THREE.SpriteMaterial({
                map: spriteMap,
                color: 0xffffff,
                transparent: true,
                opacity: 0
            });
            this.spriteOhNo = new THREE.Sprite(spriteMaterial);
            this.scene.add(this.spriteOhNo);
            this.spriteOhNo.scale.set(1, 1, 1);
            var spriteMap = new THREE.TextureLoader().load("https://cdn.glitch.com/4998919d-320e-4554-8acd-ce47fbd96994%2Fhonoooo.png?1544367522366");
            spriteMap.anisotropy = 0;
            spriteMap.magFilter = THREE.NearestFilter;
            spriteMap.minFilter = THREE.NearestFilter;
            var spriteMaterial = new THREE.SpriteMaterial({
                map: spriteMap,
                color: 0xffffff,
                transparent: true,
                opacity: 0
            });
            this.spriteOhNooo = new THREE.Sprite(spriteMaterial);
            this.scene.add(this.spriteOhNooo);
            this.spriteOhNooo.scale.set(1, 1, 1);
        }
    },
    {
        key: 'initControls',
        value: function initControls() {
            this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
            this.controls.enableDamping = true;
            this.controls.dampingFactor = .5;
            this.controls.enableRotate = !!window.query.debug;
            this.controls.enableZoom = !!window.query.debug;
        }
    },
    {
        key: 'initScene',
        value: function initScene() {
            var aspect = window.innerWidth / window.innerHeight;
            this.camera = new THREE.OrthographicCamera(FRUSTRUM_SIZE * aspect / -2, FRUSTRUM_SIZE * aspect / 2, FRUSTRUM_SIZE / 2 - 1, FRUSTRUM_SIZE / -2 - 1, .001, CAMERA_FAR);
            this.camera.position.y = 1;
            this.camera.position.z = 10;
            this.scene = new THREE.Scene();
            this.scene.fog = new THREE.Fog(settings.fogColor, 10, CAMERA_FAR - 2);
            this.renderer = new THREE.WebGLRenderer({
                antialias: true,
                alpha: true
            });
            this.renderer.setPixelRatio(window.devicePixelRatio);
            this.renderer.setSize(window.innerWidth, window.innerHeight);
            this.renderer.toneMapping = THREE.LinearToneMapping;
            document.querySelector('.js-scene').appendChild(this.renderer.domElement);
            MAX_ANISOTROPY = this.renderer.capabilities.getMaxAnisotropy();
            this.dust = new MagicDust(this.scene, this.camera, new THREE.Vector3(0, 0, 0));
            this.raycaster = new THREE.Raycaster();
            this.mouse = new THREE.Vector2();
            var planeGeo = new THREE.PlaneGeometry(40, 20);
            this.pickingPlane = new THREE.Mesh(planeGeo, new THREE.MeshBasicMaterial({
                color: 0xff0000,
                transparent: true,
                opacity: 0
            }));
            this.scene.add(this.pickingPlane);
        }
    },
    {
        key: 'blink',
        value: function blink() {
            var _this2 = this;
            clearTimeout(this._blinkTimeout);
            this.eyeMaterial.color.setHex(this.materials.mask.color.getHex());
            this.eyeMaterial.emissive.setHex(this.materials.mask.emissive.getHex());
            this._blinkTimeout = setTimeout(function() {
                _this2.eyeMaterial.color.setHex(0xffffff);
                _this2.eyeMaterial.emissive.setHex(0xffffff);
                _this2._blinkTimeout = setTimeout(function() {
                    return _this2.blink();
                },
                _this2.randomIntFromInterval(3000, 6000));
            },
            this.randomIntFromInterval(50, 150));
        }
    },
    {
        key: 'onMouseMove',
        value: function onMouseMove(event) {
            event = event.targetTouches ? event.targetTouches[0] : event;
            this.mouse.x = event.clientX / window.innerWidth * 2 - 1;
            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            if (mouseConstraint) {
                var deltaX = event.clientX - this.lastX;
                var deltaY = event.clientY - this.lastY;
                var dirX = deltaX < 0 ? -1 : 1;
                var dirY = deltaY < 0 ? -1 : 1;
                if (Math.abs(deltaX) >= MIN_DISTANCE_PER_SHAKE && dirX !== 0 && this.lastDirX !== dirX) {
                    this.lastDirX = dirX;
                    this.entropy += ENTROPY_PER_SHAKE;
                }
                if (Math.abs(deltaY) >= MIN_DISTANCE_PER_SHAKE && dirY !== 0 && this.lastDirY !== dirY) {
                    this.lastDirY = dirY;
                    this.entropy += ENTROPY_PER_SHAKE;
                }
                this.lastX = event.clientX;
                this.lastY = event.clientY;
                if (this.entropy > HIDE_HINT_ENTROPY) {
                    this.hideHint();
                }
                if (this.entropy > MAX_ENTROPY[this.level]) {
                    this.addGift();
                    this.entropy = 0;
                }
                this.raycaster.setFromCamera(this.mouse, this.camera);
                this.intersects.length = 0;
                this.raycaster.intersectObject(this.pickingPlane, false, this.intersects);
                if (this.intersects.length) {
                    var pos = this.intersects[0].point;
                    this.dust.emitter && (this.dust.emitter.position.value = pos);
                    this.moveJointToPoint(pos.x, pos.y, pos.z);
                }
                return false;
            }
        }
    },
    {
        key: 'addMouseConstraint',
        value: function addMouseConstraint(x, y, z, body) {
            var constrainedBody = body;
            var v1 = new CANNON.Vec3(x, y, z).vsub(constrainedBody.position);
            var antiRot = constrainedBody.quaternion.inverse();
            var pivot = antiRot.vmult(v1);
            this.jointBody.position.set(x, y, z);
            mouseConstraint = new CANNON.PointToPointConstraint(constrainedBody, pivot, this.jointBody, new CANNON.Vec3(0, 0, 0), 100);
            this.world.addConstraint(mouseConstraint);
            this.doll.head.linearDamping = 0;
            this.doll.upperBody.linearDamping = this.doll.upperBody.angularDamping = 0;
            this.doll.upperLeftArm.linearDamping = this.doll.upperLeftArm.angularDamping = 0;
            this.doll.upperRightArm.linearDamping = this.doll.upperRightArm.angularDamping = 0;
            this.doll.lowerLeftArm.linearDamping = this.doll.lowerLeftArm.angularDamping = 0;
            this.doll.lowerRightArm.linearDamping = this.doll.lowerRightArm.angularDamping = 0;
            this.doll.upperLeftLeg.linearDamping = this.doll.upperLeftLeg.angularDamping = 0;
            this.doll.upperRightLeg.linearDamping = this.doll.upperRightLeg.angularDamping = 0;
            this.doll.lowerLeftLeg.linearDamping = this.doll.lowerLeftLeg.angularDamping = 0;
            this.doll.lowerRightLeg.linearDamping = this.doll.lowerRightLeg.angularDamping = 0;
            this.doll.leftFoot.linearDamping = this.doll.leftFoot.angularDamping = 0;
            this.doll.rightFoot.linearDamping = this.doll.rightFoot.angularDamping = 0;
            this.doll.leftHand.linearDamping = this.doll.leftHand.angularDamping = 0;
            this.doll.rightHand.linearDamping = this.doll.rightHand.angularDamping = 0;
        }
    },
    {
        key: 'moveJointToPoint',
        value: function moveJointToPoint(x, y, z) {
            y = Math.max( - 3.8, y);
            this.jointBody.position.set(x, y, z);
            mouseConstraint && mouseConstraint.update();
        }
    },
    {
        key: 'removeJointConstraint',
        value: function removeJointConstraint() {
            this.world.removeConstraint(mouseConstraint);
            mouseConstraint = false;
            this.doll.head.linearDamping = settings.airDrag;
            this.doll.upperBody.linearDamping = this.doll.upperBody.angularDamping = settings.airDrag;
            this.doll.upperLeftArm.linearDamping = this.doll.upperLeftArm.angularDamping = settings.airDrag;
            this.doll.upperRightArm.linearDamping = this.doll.upperRightArm.angularDamping = settings.airDrag;
            this.doll.lowerLeftArm.linearDamping = this.doll.lowerLeftArm.angularDamping = settings.airDrag;
            this.doll.lowerRightArm.linearDamping = this.doll.lowerRightArm.angularDamping = settings.airDrag;
            this.doll.upperLeftLeg.linearDamping = this.doll.upperLeftLeg.angularDamping = settings.airDrag;
            this.doll.upperRightLeg.linearDamping = this.doll.upperRightLeg.angularDamping = settings.airDrag;
            this.doll.lowerLeftLeg.linearDamping = this.doll.lowerLeftLeg.angularDamping = settings.airDrag;
            this.doll.lowerRightLeg.linearDamping = this.doll.lowerRightLeg.angularDamping = settings.airDrag;
            this.doll.leftFoot.linearDamping = this.doll.leftFoot.angularDamping = settings.airDrag;
            this.doll.rightFoot.linearDamping = this.doll.rightFoot.angularDamping = settings.airDrag;
            this.doll.leftHand.linearDamping = this.doll.leftHand.angularDamping = settings.airDrag;
            this.doll.rightHand.linearDamping = this.doll.rightHand.angularDamping = settings.airDrag;
        }
    },
    {
        key: 'onMouseDown',
        value: function onMouseDown(event) {
            event = event.targetTouches ? event.targetTouches[0] : event;
            this.mouse.x = event.clientX / window.innerWidth * 2 - 1;
            this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            this.raycaster.setFromCamera(this.mouse, this.camera);
            this.intersects.length = 0;
            this.raycaster.intersectObjects(this.meshes, false, this.intersects);
            if (this.intersects.length) {
                var body = this.intersects[0].object.userData.body;
                if (!body) return;
                this.controls.enabled = false;
                var pos = body.position;
                this.pickingPlane.position.copy(pos);
                this.dust.emitter && (this.dust.emitter.position.value = pos);
                this.pickingPlane.quaternion.copy(this.camera.quaternion);
                this.addMouseConstraint(pos.x, pos.y, pos.z, body);
                this.dust.enable();
                this.showGrabbingCursor();
                this.blink();
                SOUNDS.playRandomGrunt();
                return;
            }
            this.intersects.length = 0;
            this.raycaster.intersectObjects(this.giftMeshes, true, this.intersects);
            if (this.intersects.length) {
                var _body = this.intersects[0].object.parent.userData.body;
                if (!_body) return;
                this.showTappingCursor();
                var worldPoint = new CANNON.Vec3(0, 0, 0);
                var impulse = new CANNON.Vec3(0, 0, -GIFT_IMPULSE_F * 1 / 60);
                _body.applyImpulse(impulse, worldPoint);
                SOUNDS.playRandomThud();
            }
        }
    },
    {
        key: 'onMouseUp',
        value: function onMouseUp(e) {
            this.dust.disable();
            this.controls.enabled = true;
            this.removeJointConstraint();
            this.cursor = '';
        }
    },
    {
        key: 'abortDrag',
        value: function abortDrag() {
            this.onMouseUp();
        }
    },
    {
        key: 'hideHint',
        value: function hideHint() {
            var _this3 = this;
            var showAgainTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10000;
            this.hintEl.classList.add('hidden');
            clearTimeout(this.hintTimer);
            this.hintAnimation && this.hintAnimation.stop();
            if (showAgainTimeout) {
                this.hintTimer = setTimeout(function() {
                    _this3.showHint();
                },
                showAgainTimeout);
            }
        }
    },
    {
        key: 'showHint',
        value: function showHint() {
            this.hintEl.classList.remove('hidden');
            this.hintAnimation && this.hintAnimation.play();
        }
    },
    {
        key: 'showMessage',
        value: function showMessage(name) {
            var _this4 = this;
            clearTimeout(this.hideMessageTimeout);
            this.allMessages = document.querySelectorAll('.js-notification');
            this.allMessages.forEach(function(el) {
                return el.classList.add('hidden');
            });
            if (name) {
                var selector = '.js-notification.' + name;
                var el = document.querySelector(selector);
                if (el) {
                    el.classList.add('animate');
                    el.classList.remove('hidden');
                    el.addEventListener('click',
                    function() {
                        el.classList.add('hidden');
                    });
                }
            }
            this.hideMessageTimeout = setTimeout(function() {
                return _this4.showMessage(null);
            },
            4000);
        }
    },
    {
        key: 'randomIntFromInterval',
        value: function randomIntFromInterval(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        }
    },
    {
        key: 'showSpriteOhNo',
        value: function showSpriteOhNo(pos) {
            var _this5 = this;
            return;
            TweenMax.to(this.spriteOhNo.material, .5, {
                opacity: 1,
                onComplete: function onComplete() {
                    TweenMax.to(_this5.spriteOhNo.material, 1, {
                        opacity: 0,
                        delay: 1
                    });
                }
            });
            TweenMax.fromTo(this.spriteOhNo.position, 2.5, {
                y: pos.y + 1,
                x: pos.x + 1 * Math.sign(pos.x) * -1
            },
            {
                y: pos.y + 2,
                x: pos.x + 1.5 * Math.sign(pos.x) * -1
            });
        }
    },
    {
        key: 'showSpriteOhNooo',
        value: function showSpriteOhNooo(pos) {
            var _this6 = this;
            return;
            TweenMax.to(this.spriteOhNooo.material, .5, {
                opacity: 1,
                onComplete: function onComplete() {
                    TweenMax.to(_this6.spriteOhNooo.material, 1.5, {
                        opacity: 0,
                        delay: 1
                    });
                }
            });
            TweenMax.fromTo(this.spriteOhNooo.position, 3, {
                y: pos.y,
                x: pos.x + 1 * Math.sign(pos.x) * -1
            },
            {
                y: pos.y + 5,
                x: pos.x + 1 * Math.sign(pos.x) * -1
            });
        }
    },
    {
        key: 'addGift',
        value: function addGift() {
            var _this7 = this;
            if (this.giftCount === 0) {
                this.abortDrag();
                this._dropGifts(1, createSmallGift);
                setTimeout(function() {
                    return SOUNDS.ohno_sprite_old && SOUNDS.ohno_sprite_old.play('ohno5');
                },
                500);
                SOUNDS.playRandomGrunt();
                this.hideHint(5000);
                this.showMessage('feedback1');
                this.showSpriteOhNo(this.headMesh.position);
                this.level = 1;
                window.ga('send', 'event', 'Level 1 Finished', 'Level', 'Game');
            } else if (this.giftCount === 1) {
                this.abortDrag();
                this._dropGifts(2);
                setTimeout(function() {
                    return SOUNDS.ohno_sprite_old && SOUNDS.ohno_sprite_old.play('ohno1');
                },
                500);
                SOUNDS.playRandomGrunt();
                this.hideHint(10000);
                this.showMessage('feedback2');
                this.showSpriteOhNo(this.headMesh.position);
                this.level = 2;
                window.ga('send', 'event', 'Level 2 Finished', 'Level', 'Game');
            } else if (this.giftCount === 3) {
                this.abortDrag();
                this._dropGifts(4);
                setTimeout(function() {
                    return SOUNDS.ohno_sprite_old && SOUNDS.ohno_sprite_old.play('ohno3');
                },
                500);
                SOUNDS.playRandomGrunt();
                this.hideHint(10000);
                this.showMessage('feedback3');
                this.showSpriteOhNo(this.headMesh.position);
                this.level = 3;
                window.ga('send', 'event', 'Level 3 Finished', 'Level', 'Game');
            } else if (this.giftCount === 7) {
                this.abortDrag();
                this.isRunningSpring = false;
                this.doll.head.mass = 0;
                this.doll.upperBody.mass = 0;
                this.doll.upperLeftArm.mass = 0;
                this.doll.upperRightArm.mass = 0;
                this.doll.lowerLeftArm.mass = 0;
                this.doll.lowerRightArm.mass = 0;
                this.doll.upperLeftLeg.mass = 0;
                this.doll.upperRightLeg.mass = 0;
                this.doll.lowerLeftLeg.mass = 0;
                this.doll.lowerRightLeg.mass = 0;
                this.doll.rightFoot.mass = 0;
                this.doll.leftFoot.mass = 0;
                this.doll.rightHand.mass = 0;
                this.doll.leftHand.mass = 0;
                var worldPoint = new CANNON.Vec3(0, 0, 0);
                var force = new CANNON.Vec3(0, 1000, 0);
                this.doll.upperBody.applyForce(force, worldPoint);
                this.hideHint(false);
                this.showMessage(null);
                this.showSpriteOhNooo(this.headMesh.position);
                this._dropGifts(23);
                SOUNDS.playRandomGrunt();
                setTimeout(function() {
                    return SOUNDS.playEndScream();
                },
                500);
                setTimeout(function() {
                    _this7.playOutroCameraMovement();
                    _this7.ui.animateOutro();
                    _this7.level = LEVEL_COMPLETED;
                },
                4000);
                window.ga('send', 'event', 'Game Completed', 'Level', 'Game');
            }
        }
    },
    {
        key: '_dropGifts',
        value: function _dropGifts(numGifts, type) {
            var _this8 = this;
            for (var i = 0; i < numGifts; i++) {
                setTimeout(function() {
                    var spawnPosition = _this8.bodyMesh.position.add(new THREE.Vector3(0, -.5, 0));
                    var giftObj = _this8._getNextGift(spawnPosition);
                    _this8.gifts.push(giftObj);
                    _this8.giftMeshes.push(giftObj.mesh);
                    _this8.giftCount++;
                    SOUNDS.playRandomPop();
                },
                100 * i);
            }
        }
    },
    {
        key: '_poolGifts',
        value: function _poolGifts() {
            this._giftPool = [];
            this._giftPool.push(new Gift(this.scene, this.world, {},
            createSmallGift));
            for (var i = 0; i < 30; i++) {
                this._giftPool.push(new Gift(this.scene, this.world));
            }
        }
    },
    {
        key: '_getNextGift',
        value: function _getNextGift(pos) {
            var gift = this._giftPool.shift();
            gift.setPosition(pos);
            return gift;
        }
    },
    {
        key: 'playOutroCameraMovement',
        value: function playOutroCameraMovement() {
            var _this9 = this;
            TweenMax.to(this.camera.position, 3, {
                y: 1.7,
                ease: Power2.easeInOut,
                onUpdate: function onUpdate(v) {
                    _this9.camera.updateProjectionMatrix();
                }
            });
            TweenMax.to(this.camera, 3, {
                zoom: 0.95,
                ease: Power2.easeInOut,
                onUpdate: function onUpdate(v) {
                    _this9.camera.updateProjectionMatrix();
                }
            });
        }
    },
    {
        key: 'hideSanta',
        value: function hideSanta() {
            this.headMesh.visible = false;
            this.leftFootMesh.visible = false;
            this.rightFootMesh.visible = false;
            this.leftHandMesh.visible = false;
            this.rightHandMesh.visible = false;
            this.bodyMesh.visible = false;
            this.scene.remove(this.leftArmLine);
            this.scene.remove(this.rightArmLine);
            this.scene.remove(this.leftLegLine);
            this.scene.remove(this.rightLegLine);
            this.scene.remove(this.springMesh);
            this.meshes.forEach(function(child) {
                child.visible = false;
            });
        }
    },
    {
        key: 'initDebug',
        value: function initDebug() {
            var debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : settings.debug;
            if (debug) {
                this.cannonDebugRenderer = new THREE.CannonDebugRenderer(this.scene, this.world);
                this.hideSanta();
                this.scene.background = new THREE.Color(0x000000);
            } else if (this.cannonDebugRenderer) {
                var debugMeshes = this.cannonDebugRenderer._meshes;
                this.cannonDebugRenderer = null;
                for (var i = 0; i < debugMeshes.length; i++) {
                    var mesh = debugMeshes[i];
                    if (mesh) {
                        this.scene.remove(mesh);
                    }
                }
                this.headMesh.visible = true;
                this.meshes.forEach(function(child) {
                    child.visible = true;
                });
                this.scene.background = null;
            }
        }
    },
    {
        key: 'initLights',
        value: function initLights() {
            this.dirLight = new THREE.DirectionalLight(0xffffff, settings.directionalIntensity);
            this.dirLight.position.set(settings.directionalX, settings.directionalY, settings.directionalZ);
            this.dirLight.castShadow = true;
            this.dirLight.color.setStyle(settings.directionalColor);
            this.dirLight.shadow.mapSize.set(256, 256);
            this.scene.add(this.dirLight);
            this.renderer.shadowMap.enabled = true;
            this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            this.ambientLight = new THREE.AmbientLight(0xffffff, settings.ambientIntensity);
            this.ambientLight.color.setStyle(settings.ambientColor);
            this.scene.add(this.ambientLight);
        }
    },
    {
        key: 'animate',
        value: function animate(id, timestamp) {
            var delta = this.clock.getDelta();
            if (this.isRunning) {
                requestAnimationFrame(this.animate.bind(this, id));
            }
            if (this.isRunning) {
                this.updatePhysics(delta);
                this.dust.update(delta);
            }
            if (!this._isSantaDestroyed) {
                this.updateHead();
                this.updateDynamicLimbs2();
            }
            this.gifts.forEach(function(child) {
                child.update(timestamp);
            });
            if (this.oddFrame) {
                if (!Modernizr.touchevents && !mouseConstraint && this.isRunning) {
                    this.raycaster.setFromCamera(this.mouse, this.camera);
                    this.intersects.length = 0;
                    this.raycaster.intersectObjects(this.meshes, false, this.intersects);
                    if (this.intersects.length) {
                        this.showGrabHintCursor();
                    } else {
                        this.intersects.length = 0;
                        this.raycaster.intersectObjects(this.giftMeshes, true, this.intersects);
                        if (this.intersects.length) {
                            this.showTapHintCursor();
                        } else {
                            this.showDefaultCursor();
                        }
                    }
                }
                this.dust && this.dust.setAmount(this.entropy / MAX_ENTROPY[this.level]);
                this.cannonDebugRenderer && this.cannonDebugRenderer.update();
            }
            if (this.entropy > 1) {
                this.entropy--;
            }
            this.renderer.render(this.scene, this.camera);
            this.oddFrame = !this.oddFrame;
        }
    },
    {
        key: 'showGrabHintCursor',
        value: function showGrabHintCursor() {
            if (this.cursor !== 'grabHint') {
                this.cursor = 'grabHint';
                window.Cursor.show(window.Cursor.cursors.grab);
            }
        }
    },
    {
        key: 'showGrabbingCursor',
        value: function showGrabbingCursor() {
            if (this.cursor !== 'grabbing') {
                this.cursor = 'grabbing';
                window.Cursor.show(window.Cursor.cursors.grabActive, false);
            }
        }
    },
    {
        key: 'showTapHintCursor',
        value: function showTapHintCursor() {
            if (this.cursor !== 'tapHint' && this.cursor !== 'tapping') {
                this.cursor = 'tapHint';
                window.Cursor.show(window.Cursor.cursors.pointer);
            }
        }
    },
    {
        key: 'showTappingCursor',
        value: function showTappingCursor() {
            if (this.cursor !== 'tapping') {
                this.cursor = 'tapping';
                window.Cursor.show(window.Cursor.cursors.pointerActive, false);
            }
        }
    },
    {
        key: 'showDefaultCursor',
        value: function showDefaultCursor() {
            if (this.cursor !== 'default') {
                this.cursor = 'default';
                window.Cursor.show(window.Cursor.cursors.
            default);
            }
        }
    },
    {
        key: 'onWindowResize',
        value: function onWindowResize() {
            var width = window.innerWidth;
            var height = window.innerHeight;
            var aspect = width / height;
            this.camera.left = -FRUSTRUM_SIZE * aspect / 2;
            this.camera.right = FRUSTRUM_SIZE * aspect / 2;
            this.camera.top = FRUSTRUM_SIZE / 2 - 1;
            this.camera.bottom = -FRUSTRUM_SIZE / 2 - 1;
            this.camera.updateProjectionMatrix();
            this.renderer.setSize(width, height);
            this.resolution.set(width, height);
        }
    },
    {
        key: 'updatePhysics',
        value: function updatePhysics(dt) {
            this.world.step(CANON_FIXED_TIME_STEP, dt, CANNON_MAX_SUB_STEPS);
            if (this.level === LEVEL_COMPLETED && !this._isSantaDestroyed) {
                this._isSantaDestroyed = true;
                this.world.remove(this.doll.head);
                this.world.remove(this.doll.upperBody);
                this.world.remove(this.doll.upperLeftArm);
                this.world.remove(this.doll.upperRightArm);
                this.world.remove(this.doll.lowerLeftArm);
                this.world.remove(this.doll.lowerRightArm);
                this.world.remove(this.doll.upperLeftLeg);
                this.world.remove(this.doll.upperRightLeg);
                this.world.remove(this.doll.lowerLeftLeg);
                this.world.remove(this.doll.lowerRightLeg);
                this.world.remove(this.doll.rightFoot);
                this.world.remove(this.doll.leftFoot);
                this.world.remove(this.doll.rightHand);
                this.world.remove(this.doll.leftHand);
                this.hideSanta();
            }
        }
    },
    {
        key: 'handleOrientation',
        value: function handleOrientation(event) {
            var x = event.beta;
            var y = event.gamma;
            var z = event.alpha;
            var yRad = y / (180 / Math.PI);
            var xRad = (x - 90) / (180 / Math.PI);
            this.elAngle.textContent = x;
            var xAxis = new THREE.Vector3(1, 0, 0);
            var zAxis = new THREE.Vector3(0, 0, 1);
            this.gravity = new THREE.Vector3(0, -10, 0);
            this.gravity.applyAxisAngle(zAxis, yRad * 0.25);
            this.gravity.applyAxisAngle(xAxis, xRad * -.25);
        }
    },
    {
        key: 'setupPhysics',
        value: function setupPhysics() {
            var _this10 = this;
            this.gravity = new THREE.Vector3(0, -10, 0);
            this.elAngle = document.querySelector('.angle');
            this.world = new CANNON.World();
            this.world.solver.CANNON_SOLVER_ITERATIONS = CANNON_SOLVER_ITERATIONS;
            this.world.quatNormalizeSkip = 0;
            this.world.quatNormalizeFast = false;
            this.world.defaultContactMaterial.contactEquationStiffness = 1e8;
            this.world.defaultContactMaterial.contactEquationRegularizationTime = 1;
            this.world.gravity.set(0, -10, 0);
            this.world.broadphase = new CANNON.NaiveBroadphase();
            var hangerShape = new CANNON.Sphere(0.1);
            this.hangerBody = new CANNON.Body({
                mass: 0
            });
            this.hangerBody.addShape(hangerShape);
            this.hangerBody.position.set(0, 5, 0);
            this.world.add(this.hangerBody);
            var groundShape = new CANNON.Plane();
            var groundBody = new CANNON.Body({
                mass: 0
            });
            groundBody.addShape(groundShape);
            groundBody.position.set(0, -4, 0);
            groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);
            this.world.add(groundBody);
            var floorMaterial = new THREE.ShadowMaterial({
                color: new THREE.Color().setStyle(settings.shadowColor),
                transparent: true,
                opacity: .40
            });
            this.floor = new THREE.Mesh(new THREE.PlaneBufferGeometry(30, 30), floorMaterial);
            this.floor.rotation.x = -Math.PI / 2;
            this.floor.position.y = -4;
            this.floor.receiveShadow = true;
            this.scene.add(this.floor);
            var shape = new CANNON.Sphere(0.1);
            this.jointBody = new CANNON.Body({
                mass: 0
            });
            this.jointBody.addShape(shape);
            this.jointBody.collisionFilterGroup = 0;
            this.jointBody.collisionFilterMask = 0;
            this.world.add(this.jointBody);
            var position = new CANNON.Vec3(0, -3.65, 0);
            this.doll = this.createSanta(SANTA_SCALE, position, this.world, Math.PI / 2, Math.PI / 2, Math.PI / 8);
            this.spring = new CANNON.Spring(this.doll.head, this.hangerBody, {
                localAnchorA: new CANNON.Vec3(0, this.doll.headHeight, 0),
                localAnchorB: new CANNON.Vec3(0, 0, 0),
                restLength: settings.springRestLength,
                stiffness: settings.springStiffness,
                damping: settings.springDamping
            });
            this.world.addEventListener("postStep",
            function(event) {
                if (_this10.isRunningSpring) {
                    _this10.spring.applyForce();
                }
            });
        }
    },
    {
        key: 'createMeshes',
        value: function createMeshes() {
            var _this11 = this;
            this.lineGeometry = new THREE.Geometry();
            this.lineGeometry.vertices.push(new THREE.Vector3().copy(this.hangerBody.position));
            this.lineGeometry.vertices.push(new THREE.Vector3().copy(this.doll.head.position));
            this.line = new MeshLine();
            this.line.setGeometry(this.lineGeometry);
            this.resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);
            var material = new MeshLineMaterial({
                useMap: false,
                color: new THREE.Color().setStyle(settings.springColor),
                resolution: this.resolution,
                sizeAttenuation: true,
                lineWidth: .002,
                near: this.camera.near,
                far: this.camera.far,
                side: THREE.DoubleSide
            });
            this.springMesh = new THREE.Mesh(this.line.geometry, material);
            this.scene.add(this.springMesh);
            var headScale = SANTA_SCALE / 3;
            var offset = this.createBeardCylinder(headScale);
            var head = this._headModel = this.objectLoader.parse(this.assets.getResult('head-json'));
            head.rotation.y = Math.PI;
            head.position.y = settings.headPositionY;
            head.scale.setScalar(settings.headSize);
            this.headMesh && this.headMesh.add(head);
            head.children[0].material = this.materials.hat;
            head.children[0].userData.body = this.doll.head;
            this.meshes.push(head.children[0]);
            head.children[3].visible = false;
            head.children[7].visible = false;
            head.children[6].material = this.materials.nose;
            head.children[6].userData.body = this.doll.head;
            head.children[6].scale.x *= 1.2;
            this.meshes.push(head.children[6]);
            head.children[4].material = this.materials.eyes;
            head.children[4].userData.body = this.doll.head;
            this.eyeMaterial = head.children[4].material;
            this.meshes.push(head.children[4]);
            head.children[1].material = this.materials.shoe;
            head.children[2].material = this.materials.shoe;
            head.children[9].material = this.materials.shoe;
            head.children[5].material = this.materials.shoe;
            head.children[5].userData.body = this.doll.head;
            this.meshes.push(head.children[5]);
            head.children[8].visible = false;
            this.meshes.push(head.children[8]);
            var body = this.objLoader.parse(this.assets.getResult('body-obj'));
            body.scale.setScalar(.006);
            body.children[0].material = this.materials.body;
            this.bodyMesh = new THREE.Group();
            this.bodyMesh.add(body);
            body.children[0].castShadow = true;
            this.scene.add(this.bodyMesh);
            var bodyHitGeom = new THREE.SphereGeometry(SANTA_SCALE * 0.55, 5, 5);
            var bodyHitMat = new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true,
                visible: SANTA_SHOW_HIT_AREAS
            });
            var bodyHitMesh = new THREE.Mesh(bodyHitGeom, bodyHitMat);
            this.bodyMesh.add(bodyHitMesh);
            bodyHitMesh.userData.body = this.doll.upperBody;
            this.meshes.push(bodyHitMesh);
            this.doll.upperBody.addEventListener('collide',
            function(e) {
                if (e.body.id === 1) {
                    var vol = THREE.Math.clamp(THREE.Math.mapLinear(Math.abs(_this11.doll.upperBody.velocity.y), 0, 10, 0, 1), 0, 1);
                    SOUNDS.playRandomThud(vol);
                    if (_this11.doll.upperBody.velocity.y < -10) {
                        _this11.addGift();
                    }
                } else if (e.body.userType === 'gift') {
                    var _vol = THREE.Math.clamp(THREE.Math.mapLinear(Math.abs(_this11.doll.upperBody.velocity.length()), 0, 15, 0, 1), 0, 1);
                    SOUNDS.playRandomThud(_vol);
                }
            });
            var handModel = this.objectLoader.parse(this.assets.getResult('hand-json'));
            var leftHand = handModel.clone();
            leftHand.position.x = this.doll.handRadius;
            leftHand.rotation.z = Math.PI / 2;
            leftHand.scale.setScalar(.03);
            leftHand.children[0].material = this.materials.hands;
            leftHand.children[1].material = this.materials.hands;
            this.leftHandMesh = new THREE.Object3D();
            this.leftHandMesh.add(leftHand);
            this.scene.add(this.leftHandMesh);
            var leftHandHitGeom = new THREE.SphereGeometry(SANTA_SCALE * 0.25, 5, 5);
            var leftHandHitMat = new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true,
                visible: SANTA_SHOW_HIT_AREAS
            });
            var leftHandHitMesh = new THREE.Mesh(leftHandHitGeom, leftHandHitMat);
            this.leftHandMesh.add(leftHandHitMesh);
            leftHandHitMesh.userData.body = this.doll.leftHand;
            this.meshes.push(leftHandHitMesh);
            var rightHand = handModel.clone();
            rightHand.position.x = -this.doll.handRadius;
            rightHand.rotation.z = Math.PI / 2;
            rightHand.rotation.y = Math.PI;
            rightHand.scale.setScalar(.03);
            rightHand.children[0].material = this.materials.hands;
            rightHand.children[1].material = this.materials.hands;
            this.rightHandMesh = new THREE.Object3D();
            this.rightHandMesh.add(rightHand);
            this.scene.add(this.rightHandMesh);
            var rightHandHitGeom = new THREE.SphereGeometry(SANTA_SCALE * 0.25, 5, 5);
            var rightHandHitMat = new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true,
                visible: SANTA_SHOW_HIT_AREAS
            });
            var rightHandHitMesh = new THREE.Mesh(rightHandHitGeom, rightHandHitMat);
            this.rightHandMesh.add(rightHandHitMesh);
            rightHandHitMesh.userData.body = this.doll.rightHand;
            this.meshes.push(rightHandHitMesh);
            var rightShoe = this.objLoader.parse(this.assets.getResult('rightshoe-obj'));
            rightShoe.position.x = -0.01;
            rightShoe.position.z = .01;
            rightShoe.scale.setScalar(.008);
            rightShoe.children[0].material = this.materials.white;
            rightShoe.children[1].material = this.materials.shoe;
            rightShoe.children[2].material = this.materials.shoe;
            this.leftFootMesh = new THREE.Object3D();
            this.leftFootMesh.add(rightShoe);
            this.scene.add(this.leftFootMesh);
            var rightShoeHitGeom = new THREE.SphereGeometry(SANTA_SCALE * 0.25, 5, 5);
            var rightShoeHitMat = new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true,
                visible: SANTA_SHOW_HIT_AREAS
            });
            var rightShoeHitMesh = new THREE.Mesh(rightShoeHitGeom, rightShoeHitMat);
            this.leftFootMesh.add(rightShoeHitMesh);
            rightShoeHitMesh.userData.body = this.doll.leftFoot;
            this.meshes.push(rightShoeHitMesh);
            this.leftFootMesh.castShadow = true;
            var leftShoe = this.objLoader.parse(this.assets.getResult('leftshoe-obj'));
            leftShoe.position.z = 0;
            leftShoe.rotation.x = Math.PI * -0.1;
            leftShoe.scale.setScalar(.008);
            leftShoe.children[0].material = this.materials.white;
            leftShoe.children[1].material = this.materials.shoe;
            leftShoe.children[2].material = this.materials.shoe;
            this.rightFootMesh = new THREE.Object3D();
            this.rightFootMesh.add(leftShoe);
            this.scene.add(this.rightFootMesh);
            var leftShoeHitGeom = new THREE.SphereGeometry(SANTA_SCALE * 0.25, 5, 5);
            var leftShoeHitMat = new THREE.MeshBasicMaterial({
                color: 0xff0000,
                wireframe: true,
                visible: SANTA_SHOW_HIT_AREAS
            });
            var leftShoeHitMesh = new THREE.Mesh(leftShoeHitGeom, leftShoeHitMat);
            this.rightFootMesh.add(leftShoeHitMesh);
            leftShoeHitMesh.userData.body = this.doll.rightFoot;
            this.meshes.push(leftShoeHitMesh);
            this.rightFootMesh.castShadow = true;
            var beardGift1 = createStripedGift(SANTA_SCALE * 0.15).mesh;
            beardGift1.position.set(SANTA_SCALE * .31, SANTA_SCALE * -0.12, SANTA_SCALE * .31);
            beardGift1.rotation.x = Math.PI / -3;
            beardGift1.rotation.z = Math.PI / 4;
            beardGift1.rotation.y = Math.PI / 4;
            this.headMesh.add(beardGift1);
            var beardGift2 = createGreenGift(SANTA_SCALE * 0.3).mesh;
            beardGift2.position.set( - SANTA_SCALE * .3, SANTA_SCALE * -0.2, SANTA_SCALE * .3);
            beardGift2.rotation.x = Math.PI / 3;
            beardGift2.rotation.z = Math.PI / -6;
            beardGift2.rotation.y = Math.PI / -5;
            this.headMesh.add(beardGift2);
            return;
            var gift = createDottedGift().mesh;
            gift.position.set(0, -3.5, 0);
            this.scene.add(gift);
        }
    },
    {
        key: 'createBeardCylinder',
        value: function createBeardCylinder(headScale) {
            var model = new THREE.CylinderGeometry(headScale * 0.7, headScale * 0.4, headScale * 0.3, 64, 32, true);
            var fuzzy = new FuzzyMesh({
                geometry: model,
                config: {
                    hairLength: headScale * 2.2,
                    hairRadialSegments: 3,
                    hairHeightSegments: 8,
                    hairRadiusTop: .0,
                    hairRadiusBase: 0.1,
                    fuzz: .5,
                    gravity: settings.beardGravity,
                    centrifugalForceFactor: 0.01,
                    centrifugalDecay: .1,
                    movementForceFactor: 2,
                    movementDecay: .9,
                    settleDecay: .7
                },
                materialUniformValues: {
                    roughness: 1,
                    metalness: 0,
                    diffuse: new THREE.Color().setStyle(settings.beardColor),
                    emissive: new THREE.Color().setStyle(settings.beardEmissive)
                }
            });
            this.scene.add(fuzzy);
            this.headMesh = fuzzy;
            this.headMesh.castShadow = false;
            return headScale * .85;
        }
    },
    {
        key: 'updateHead',
        value: function updateHead() {
            if (!this.headMesh) return;
            this.headMesh && this.headMesh.update();
            var _doll$head$quaternion = this.doll.head.quaternion.toAxisAngle(),
            _doll$head$quaternion2 = _slicedToArray(_doll$head$quaternion, 2),
            axis = _doll$head$quaternion2[0],
            angle = _doll$head$quaternion2[1];
            this.headMesh.setPosition(this.doll.head.position);
            this.headMesh.setRotationAxis(axis);
            this.headMesh.setRotationAngle(angle);
            if (this.bodyMesh) {
                this.bodyMesh.position.copy(this.doll.upperBody.position);
                this.bodyMesh.quaternion.copy(this.doll.upperBody.quaternion);
            }
            if (this.leftFootMesh) {
                this.leftFootMesh.position.copy(this.doll.leftFoot.position);
                this.leftFootMesh.quaternion.copy(this.doll.leftFoot.quaternion);
            }
            if (this.rightFootMesh) {
                this.rightFootMesh.position.copy(this.doll.rightFoot.position);
                this.rightFootMesh.quaternion.copy(this.doll.rightFoot.quaternion);
            }
            if (this.leftHandMesh) {
                this.leftHandMesh.position.copy(this.doll.leftHand.position);
                this.leftHandMesh.quaternion.copy(this.doll.leftHand.quaternion);
            }
            if (this.rightHandMesh) {
                this.rightHandMesh.position.copy(this.doll.rightHand.position);
                this.rightHandMesh.quaternion.copy(this.doll.rightHand.quaternion);
            }
            this.dollHeadVector.set(0, this.doll.headHeight * 0.95, 0);
            this.topVector.copy(this.doll.head.position).add(this.dollHeadVector.applyQuaternion(this.doll.head.quaternion));
            if (this.springMesh) {
                this.lineGeometry.vertices[1] = this.topVector;
                this.line.setGeometry(this.lineGeometry);
            }
        }
    },
    {
        key: 'getLimbsCurve',
        value: function getLimbsCurve(shoulder, elbowJoint, lowerBody) {
            var doll = this.doll;
            var curve = new THREE.CatmullRomCurve3([new THREE.Vector3().copy(shoulder.bodyB.position).add(new THREE.Vector3().copy(shoulder.pivotB).applyQuaternion(shoulder.bodyB.quaternion)), new THREE.Vector3().copy(elbowJoint.bodyB.position).add(new THREE.Vector3().copy(elbowJoint.pivotB).applyQuaternion(elbowJoint.bodyB.quaternion)), new THREE.Vector3().copy(elbowJoint.bodyA.position).sub(new THREE.Vector3().copy(elbowJoint.pivotA).applyQuaternion(elbowJoint.bodyA.quaternion))]);
            return curve;
        }
    },
    {
        key: 'updateDynamicLimbs',
        value: function updateDynamicLimbs() {
            if (!this.leftArmGeometry) {
                this.leftArmGeometry = new THREE.BufferGeometry();
                var leftArmMesh = new THREE.Mesh(this.leftArmGeometry, this.materials.arms);
                leftArmMesh.castShadow = true;
                this.scene.add(leftArmMesh);
            }
            if (!this.rightArmGeometry) {
                this.rightArmGeometry = new THREE.BufferGeometry();
                var rightArmMesh = new THREE.Mesh(this.rightArmGeometry, this.materials.arms);
                rightArmMesh.castShadow = true;
                this.scene.add(rightArmMesh);
            }
            if (!this.rightLegGeometry) {
                this.rightLegGeometry = new THREE.BufferGeometry();
                var rightLegMesh = new THREE.Mesh(this.rightLegGeometry, this.materials.legs);
                rightLegMesh.castShadow = true;
                this.scene.add(rightLegMesh);
            }
            if (!this.leftLegGeometry) {
                this.leftLegGeometry = new THREE.BufferGeometry();
                var leftLegMesh = new THREE.Mesh(this.leftLegGeometry, this.materials.legs);
                leftLegMesh.castShadow = true;
                this.scene.add(leftLegMesh);
            }
            var leftArmCurve = this.getLimbsCurve(this.doll.leftShoulder, this.doll.leftElbowJoint, this.doll.lowerLeftArm);
            this.leftArmGeometry.copy(new THREE.TubeBufferGeometry(leftArmCurve, 16, settings.limbsWidth, 5, false));
            var rightArmCurve = this.getLimbsCurve(this.doll.rightShoulder, this.doll.rightElbowJoint, this.doll.lowerRightArm);
            this.rightArmGeometry.copy(new THREE.TubeBufferGeometry(rightArmCurve, 16, settings.limbsWidth, 5, false));
            var rightLegCurve = this.getLimbsCurve(this.doll.rightHipJoint, this.doll.rightKneeJoint, this.doll.lowerRightLeg);
            this.rightLegGeometry.copy(new THREE.TubeBufferGeometry(rightLegCurve, 16, settings.limbsWidth, 5, false));
            var leftLegCurve = this.getLimbsCurve(this.doll.leftHipJoint, this.doll.leftKneeJoint, this.doll.lowerLeftLeg);
            this.leftLegGeometry.copy(new THREE.TubeBufferGeometry(leftLegCurve, 16, settings.limbsWidth, 5, false));
        }
    },
    {
        key: 'updateDynamicLimbs2',
        value: function updateDynamicLimbs2() {
            var DIVISIONS = 20;
            if (!this.leftArmGeometry) {
                this.armMaterial = new MeshLineMaterial({
                    useMap: false,
                    color: new THREE.Color().setStyle(settings.armsColor),
                    resolution: this.resolution,
                    sizeAttenuation: true,
                    lineWidth: .0055,
                    near: this.camera.near,
                    far: this.camera.far,
                    side: THREE.DoubleSide
                });
                var _leftArmCurve = this.getLimbsCurve(this.doll.leftShoulder, this.doll.leftElbowJoint, this.doll.lowerLeftArm);
                this.leftArmGeometry = new THREE.BufferGeometry();
                this.leftArmGeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array((DIVISIONS + 1) * 3), 3));
                this.leftArmGeometry.attributes.position.setDynamic(true);
                this.leftArmLine = new MeshLine();
                this.leftArmLine.setGeometry(this.leftArmGeometry.attributes.position.array);
                this.leftArmMesh = new THREE.Mesh(this.leftArmLine.geometry, this.armMaterial);
                this.scene.add(this.leftArmMesh);
            }
            if (!this.rightArmGeometry) {
                var _rightArmCurve = this.getLimbsCurve(this.doll.rightShoulder, this.doll.rightElbowJoint, this.doll.lowerRightArm);
                this.rightArmGeometry = new THREE.BufferGeometry();
                this.rightArmGeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array((DIVISIONS + 1) * 3), 3));
                this.rightArmGeometry.attributes.position.setDynamic(true);
                this.rightArmLine = new MeshLine();
                this.rightArmLine.setGeometry(this.rightArmGeometry.attributes.position.array);
                this.rightArmMesh = new THREE.Mesh(this.rightArmLine.geometry, this.armMaterial);
                this.scene.add(this.rightArmMesh);
            }
            if (!this.rightLegGeometry) {
                this.legMaterial = new MeshLineMaterial({
                    useMap: false,
                    color: new THREE.Color().setStyle(settings.legsColor),
                    resolution: this.resolution,
                    sizeAttenuation: true,
                    lineWidth: .0055,
                    near: this.camera.near,
                    far: this.camera.far,
                    side: THREE.DoubleSide
                });
                var _rightLegCurve = this.getLimbsCurve(this.doll.rightHipJoint, this.doll.rightKneeJoint, this.doll.lowerRightLeg);
                this.rightLegGeometry = new THREE.BufferGeometry();
                this.rightLegGeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array((DIVISIONS + 1) * 3), 3));
                this.rightLegGeometry.attributes.position.setDynamic(true);
                this.rightLegLine = new MeshLine();
                this.rightLegLine.setGeometry(this.rightLegGeometry.attributes.position.array);
                this.rightLegMesh = new THREE.Mesh(this.rightLegLine.geometry, this.legMaterial);
                this.scene.add(this.rightLegMesh);
            }
            if (!this.leftLegGeometry) {
                var _leftLegCurve = this.getLimbsCurve(this.doll.leftHipJoint, this.doll.leftKneeJoint, this.doll.lowerLeftLeg);
                this.leftLegGeometry = new THREE.BufferGeometry();
                this.leftLegGeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array((DIVISIONS + 1) * 3), 3));
                this.leftLegGeometry.attributes.position.setDynamic(true);
                this.leftLegLine = new MeshLine();
                this.leftLegLine.setGeometry(this.leftLegGeometry.attributes.position.array);
                this.leftLegMesh = new THREE.Mesh(this.leftLegLine.geometry, this.legMaterial);
                this.scene.add(this.leftLegMesh);
            }
            var leftArmCurve = this.getLimbsCurve(this.doll.leftShoulder, this.doll.leftElbowJoint, this.doll.lowerLeftArm);
            var points = leftArmCurve.getSpacedPoints(DIVISIONS);
            for (var j = 0; j < points.length; j++) {
                this.leftArmGeometry.attributes.position.setXYZ(j, points[j].x, points[j].y, points[j].z);
            }
            this.leftArmGeometry.attributes.position.needsUpdate = true;
            this.leftArmLine.setGeometry(this.leftArmGeometry.attributes.position.array);
            var rightArmCurve = this.getLimbsCurve(this.doll.rightShoulder, this.doll.rightElbowJoint, this.doll.lowerRightArm);
            var points = rightArmCurve.getSpacedPoints(DIVISIONS);
            for (var j = 0; j < points.length; j++) {
                this.rightArmGeometry.attributes.position.setXYZ(j, points[j].x, points[j].y, points[j].z);
            }
            this.rightArmGeometry.attributes.position.needsUpdate = true;
            this.rightArmLine.setGeometry(this.rightArmGeometry.attributes.position.array);
            var rightLegCurve = this.getLimbsCurve(this.doll.rightHipJoint, this.doll.rightKneeJoint, this.doll.lowerRightLeg);
            var points = rightLegCurve.getSpacedPoints(DIVISIONS);
            for (var j = 0; j < points.length; j++) {
                this.rightLegGeometry.attributes.position.setXYZ(j, points[j].x, points[j].y, points[j].z);
            }
            this.rightLegGeometry.attributes.position.needsUpdate = true;
            this.rightLegLine.setGeometry(this.rightLegGeometry.attributes.position.array);
            var leftLegCurve = this.getLimbsCurve(this.doll.leftHipJoint, this.doll.leftKneeJoint, this.doll.lowerLeftLeg);
            var points = leftLegCurve.getSpacedPoints(DIVISIONS);
            for (var j = 0; j < points.length; j++) {
                this.leftLegGeometry.attributes.position.setXYZ(j, points[j].x, points[j].y, points[j].z);
            }
            this.leftLegGeometry.attributes.position.needsUpdate = true;
            this.leftLegLine.setGeometry(this.leftLegGeometry.attributes.position.array);
        }
    },
    {
        key: 'createSanta',
        value: function createSanta(scale, position, world, angleA, angleB, twistAngle) {
            var numBodiesAtStart = world.bodies.length;
            var shouldersDistance = 0.8 * scale,
            upperArmLength = 0.25 * scale,
            lowerArmLength = 0.25 * scale,
            upperArmSize = 0.25 * scale,
            lowerArmSize = 0.25 * scale,
            neckLength = -0.3 * scale,
            headRadius = 0.25 * scale,
            headHeight = 1.5 * scale,
            upperBodyLength = 0.6 * scale,
            pelvisLength = 0.1 * scale,
            upperLegLength = 0.3 * scale,
            upperLegSize = 0.2 * scale,
            lowerLegSize = 0.2 * scale,
            lowerLegLength = 0.2 * scale,
            bodyRadius = shouldersDistance * 0.5,
            feetRadius = shouldersDistance * 0.2,
            handRadius = shouldersDistance * 0.1;
            var headShape = new CANNON.Sphere(headRadius),
            hatShape = new CANNON.Cylinder(0, headRadius, headHeight, 3),
            upperArmShape = new CANNON.Box(new CANNON.Vec3(upperArmLength * 0.5, settings.limbsWidth, settings.limbsWidth)),
            lowerArmShape = new CANNON.Box(new CANNON.Vec3(lowerArmLength * 0.5, settings.limbsWidth, settings.limbsWidth)),
            upperBodyShape = new CANNON.Sphere(bodyRadius),
            feetShape = new CANNON.Sphere(feetRadius),
            handShape = new CANNON.Sphere(handRadius),
            upperLegShape = new CANNON.Box(new CANNON.Vec3(settings.limbsWidth, upperLegLength * 0.5, settings.limbsWidth)),
            lowerLegShape = new CANNON.Box(new CANNON.Vec3(settings.limbsWidth, lowerLegLength * 0.5, settings.limbsWidth));
            var lowerLeftLeg = new CANNON.Body({
                mass: settings.legsMass,
                position: new CANNON.Vec3( - shouldersDistance / 2, lowerLegLength / 2, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            var lowerRightLeg = new CANNON.Body({
                mass: settings.legsMass,
                position: new CANNON.Vec3(shouldersDistance / 2, lowerLegLength / 2, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            lowerLeftLeg.addShape(lowerLegShape);
            lowerRightLeg.addShape(lowerLegShape);
            world.addBody(lowerLeftLeg);
            world.addBody(lowerRightLeg);
            var upperLeftLeg = new CANNON.Body({
                mass: settings.legsMass,
                position: new CANNON.Vec3( - shouldersDistance / 2, lowerLeftLeg.position.y + lowerLegLength / 2 + upperLegLength / 2, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            var upperRightLeg = new CANNON.Body({
                mass: settings.legsMass,
                position: new CANNON.Vec3(shouldersDistance / 2, lowerRightLeg.position.y + lowerLegLength / 2 + upperLegLength / 2, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            upperLeftLeg.addShape(upperLegShape);
            upperRightLeg.addShape(upperLegShape);
            world.addBody(upperLeftLeg);
            world.addBody(upperRightLeg);
            var leftFoot = new CANNON.Body({
                mass: settings.legsMass,
                position: new CANNON.Vec3( - shouldersDistance / 2, -lowerLegLength / 2, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            leftFoot.addShape(feetShape);
            world.addBody(leftFoot);
            var rightFoot = new CANNON.Body({
                mass: settings.legsMass,
                position: new CANNON.Vec3(shouldersDistance / 2, -lowerLegLength / 2, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            rightFoot.addShape(feetShape);
            world.addBody(rightFoot);
            var leftAnkleJoint = new CANNON.ConeTwistConstraint(leftFoot, lowerLeftLeg, {
                pivotA: new CANNON.Vec3(0, feetRadius / 2, 0),
                pivotB: new CANNON.Vec3(0, -upperLegLength / 2, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: Math.PI / 100,
                twistAngle: 0,
                maxForce: 1e100
            });
            var rightAnkleJoint = new CANNON.ConeTwistConstraint(rightFoot, lowerRightLeg, {
                pivotA: new CANNON.Vec3(0, feetRadius / 2, 0),
                pivotB: new CANNON.Vec3(0, -upperLegLength / 2, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: Math.PI / 100,
                twistAngle: 0,
                maxForce: 1e100
            });
            world.addConstraint(leftAnkleJoint);
            world.addConstraint(rightAnkleJoint);
            var upperBody = new CANNON.Body({
                mass: settings.bodyMass,
                position: new CANNON.Vec3(0, upperBodyLength / 2 + lowerLegLength + upperLegLength, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            upperBody.addShape(upperBodyShape);
            world.addBody(upperBody);
            var head = new CANNON.Body({
                mass: settings.headMass,
                position: new CANNON.Vec3(0, upperBody.position.y + upperBodyLength / 2 + headRadius + neckLength, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.headAngularDamping
            });
            var headShapeQuat = new CANNON.Quaternion();
            headShapeQuat.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);
            head.addShape(headShape, new CANNON.Vec3(0, 0, 0));
            head.addShape(hatShape, new CANNON.Vec3(0, headHeight * .5, 0), headShapeQuat);
            world.addBody(head);
            var upperLeftArm = new CANNON.Body({
                mass: settings.armsMass,
                position: new CANNON.Vec3( - shouldersDistance / 3 - upperArmLength / 2, upperBody.position.y + shouldersDistance / 3, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            var upperRightArm = new CANNON.Body({
                mass: settings.armsMass,
                position: new CANNON.Vec3(shouldersDistance / 3 + upperArmLength / 2, upperBody.position.y + shouldersDistance / 3, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            upperLeftArm.addShape(upperArmShape);
            upperRightArm.addShape(upperArmShape);
            world.addBody(upperLeftArm);
            world.addBody(upperRightArm);
            var leftArmQuat = new CANNON.Quaternion();
            leftArmQuat.setFromAxisAngle(new CANNON.Vec3(0, 0, 1), -Math.PI / 4);
            var lowerLeftArm = new CANNON.Body({
                mass: settings.armsMass,
                position: new CANNON.Vec3(upperLeftArm.position.x - lowerArmLength / 2 - upperArmLength / 2, upperLeftArm.position.y * 1.1, 0),
                quaternion: leftArmQuat,
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            var lowerRightArm = new CANNON.Body({
                mass: settings.armsMass,
                position: new CANNON.Vec3(upperRightArm.position.x + lowerArmLength / 2 + upperArmLength / 2, upperRightArm.position.y, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            lowerLeftArm.addShape(lowerArmShape);
            lowerRightArm.addShape(lowerArmShape);
            world.addBody(lowerLeftArm);
            world.addBody(lowerRightArm);
            var leftHand = new CANNON.Body({
                mass: settings.armsMass,
                position: new CANNON.Vec3(lowerLeftArm.position.x - lowerArmLength / 2, lowerLeftArm.position.y, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            leftHand.addShape(handShape);
            world.addBody(leftHand);
            var rightHand = new CANNON.Body({
                mass: settings.armsMass,
                position: new CANNON.Vec3(lowerRightArm.position.x + lowerArmLength / 2, lowerRightArm.position.y, 0),
                linearDamping: settings.airDrag,
                angularDamping: settings.airDrag
            });
            rightHand.addShape(handShape);
            world.addBody(rightHand);
            var leftWristJoint = new CANNON.ConeTwistConstraint(leftHand, lowerLeftArm, {
                pivotA: new CANNON.Vec3(handRadius, 0, 0),
                pivotB: new CANNON.Vec3( - lowerArmLength / 2, 0, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: Math.PI / 100,
                twistAngle: 0,
                maxForce: 1e100
            });
            var rightWristJoint = new CANNON.ConeTwistConstraint(rightHand, lowerRightArm, {
                pivotA: new CANNON.Vec3( - handRadius, 0, 0),
                pivotB: new CANNON.Vec3(lowerArmLength / 2, 0, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: Math.PI / 100,
                twistAngle: 0,
                maxForce: 1e100
            });
            world.addConstraint(leftWristJoint);
            world.addConstraint(rightWristJoint);
            var neckJoint = new CANNON.ConeTwistConstraint(head, upperBody, {
                pivotA: new CANNON.Vec3(0, -headRadius - neckLength / 2, 0),
                pivotB: new CANNON.Vec3(0, upperBodyLength / 2, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: Math.PI / 10,
                twistAngle: twistAngle,
                maxForce: 1e6
            });
            world.addConstraint(neckJoint);
            var leftKneeJoint = new CANNON.ConeTwistConstraint(lowerLeftLeg, upperLeftLeg, {
                pivotA: new CANNON.Vec3(0, lowerLegLength / 2, 0),
                pivotB: new CANNON.Vec3(0, -upperLegLength / 2, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: angleA,
                twistAngle: twistAngle,
                maxForce: 1e100
            });
            var rightKneeJoint = new CANNON.ConeTwistConstraint(lowerRightLeg, upperRightLeg, {
                pivotA: new CANNON.Vec3(0, lowerLegLength / 2, 0),
                pivotB: new CANNON.Vec3(0, -upperLegLength / 2, 0),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: angleA,
                twistAngle: twistAngle,
                maxForce: 1e100
            });
            world.addConstraint(leftKneeJoint);
            world.addConstraint(rightKneeJoint);
            var leftHipJoint = new CANNON.ConeTwistConstraint(upperLeftLeg, upperBody, {
                pivotA: new CANNON.Vec3(0, upperLegLength / 2, 0),
                pivotB: new CANNON.Vec3( - shouldersDistance / 4, -shouldersDistance / 3, shouldersDistance / 10),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: angleA,
                twistAngle: twistAngle,
                maxForce: 1e100
            });
            var rightHipJoint = new CANNON.ConeTwistConstraint(upperRightLeg, upperBody, {
                pivotA: new CANNON.Vec3(0, upperLegLength / 2, 0),
                pivotB: new CANNON.Vec3(shouldersDistance / 4, -shouldersDistance / 3, shouldersDistance / 10),
                axisA: CANNON.Vec3.UNIT_Y,
                axisB: CANNON.Vec3.UNIT_Y,
                angle: angleA,
                twistAngle: twistAngle,
                maxForce: 1e100
            });
            world.addConstraint(leftHipJoint);
            world.addConstraint(rightHipJoint);
            var leftShoulder = new CANNON.ConeTwistConstraint(upperBody, upperLeftArm, {
                pivotA: new CANNON.Vec3( - shouldersDistance / 3, shouldersDistance / 3, 0),
                pivotB: new CANNON.Vec3(upperArmLength / 2, 0, 0),
                axisA: CANNON.Vec3.UNIT_X,
                axisB: CANNON.Vec3.UNIT_X,
                angle: angleB,
                twistAngle: twistAngle
            });
            var rightShoulder = new CANNON.ConeTwistConstraint(upperBody, upperRightArm, {
                pivotA: new CANNON.Vec3(shouldersDistance / 3, shouldersDistance / 3, 0),
                pivotB: new CANNON.Vec3( - upperArmLength / 2, 0, 0),
                axisA: CANNON.Vec3.UNIT_X,
                axisB: CANNON.Vec3.UNIT_X,
                angle: angleB,
                twistAngle: twistAngle
            });
            world.addConstraint(leftShoulder);
            world.addConstraint(rightShoulder);
            var leftElbowJoint = new CANNON.ConeTwistConstraint(lowerLeftArm, upperLeftArm, {
                pivotA: new CANNON.Vec3(lowerArmLength / 2, 0, 0),
                pivotB: new CANNON.Vec3( - upperArmLength / 2, 0, 0),
                axisA: CANNON.Vec3.UNIT_X,
                axisB: CANNON.Vec3.UNIT_X,
                angle: angleA,
                twistAngle: twistAngle
            });
            var rightElbowJoint = new CANNON.ConeTwistConstraint(lowerRightArm, upperRightArm, {
                pivotA: new CANNON.Vec3( - lowerArmLength / 2, 0, 0),
                pivotB: new CANNON.Vec3(upperArmLength / 2, 0, 0),
                axisA: CANNON.Vec3.UNIT_X,
                axisB: CANNON.Vec3.UNIT_X,
                angle: angleA,
                twistAngle: twistAngle
            });
            world.addConstraint(leftElbowJoint);
            world.addConstraint(rightElbowJoint);
            for (var i = numBodiesAtStart; i < world.bodies.length; i++) {
                var body = world.bodies[i];
                body.position.vadd(position, body.position);
            }
            return {
                head: head,
                upperLeftArm: upperLeftArm,
                lowerLeftArm: lowerLeftArm,
                upperRightArm: upperRightArm,
                lowerRightArm: lowerRightArm,
                upperArmShape: upperArmShape,
                lowerArmShape: lowerArmShape,
                upperLegShape: upperLegShape,
                lowerLegShape: lowerLegShape,
                lowerLeftLeg: lowerLeftLeg,
                upperLeftLeg: upperLeftLeg,
                lowerRightLeg: lowerRightLeg,
                upperRightLeg: upperRightLeg,
                leftShoulder: leftShoulder,
                leftElbowJoint: leftElbowJoint,
                rightShoulder: rightShoulder,
                rightElbowJoint: rightElbowJoint,
                leftHipJoint: leftHipJoint,
                rightHipJoint: rightHipJoint,
                leftKneeJoint: leftKneeJoint,
                rightKneeJoint: rightKneeJoint,
                upperBody: upperBody,
                bodyRadius: bodyRadius,
                headHeight: headHeight,
                rightFoot: rightFoot,
                leftFoot: leftFoot,
                feetRadius: feetRadius,
                rightHand: rightHand,
                leftHand: leftHand,
                handRadius: handRadius
            };
        }
    },
    {
        key: 'initDatGUI',
        value: function initDatGUI() {
            var _this12 = this;
            var lights = this.gui.addFolder('Lights');
            lights.add(settings, 'exposure', 0.5, 1.5).step(0.01);
            lights.addColor(settings, 'ambientColor').onChange(function(value) {
                _this12.ambientLight.color.setStyle(value);
            });
            lights.add(settings, 'ambientIntensity', 0, 1.5).onChange(function(value) {
                _this12.ambientLight.intensity = Number(value);
            });
            lights.addColor(settings, 'directionalColor').onChange(function(value) {
                _this12.dirLight.color.setStyle(value);
            });
            lights.add(settings, 'directionalIntensity', 0, 1.5).onChange(function(value) {
                _this12.dirLight.intensity = Number(value);
            });
            lights.add(settings, 'directionalX', -10, 10).onChange(function(value) {
                _this12.dirLight.position.x = Number(value);
            });
            lights.add(settings, 'directionalY', -10, 10).onChange(function(value) {
                _this12.dirLight.position.y = Number(value);
            });
            lights.add(settings, 'directionalZ', -10, 10).onChange(function(value) {
                _this12.dirLight.position.z = Number(value);
            });
            var f1 = this.gui.addFolder('Colors');
            f1.add(settings, 'metalness', 0, 1).onChange(function(value) {
                Object.keys(_this12.materials).forEach(function(key) {
                    _this12.materials[key].metalness = value;
                });
            });
            f1.add(settings, 'roughness', 0, 1).onChange(function(value) {
                Object.keys(_this12.materials).forEach(function(key) {
                    _this12.materials[key].roughness = value;
                });
            });
            f1.addColor(settings, 'fogColor').onChange(function(value) {
                _this12.scene.fog.color.setStyle(value);
            });
            f1.addColor(settings, 'hatColor').onChange(function(value) {
                _this12.materials.hat.color.setStyle(value);
            });
            f1.addColor(settings, 'hatEmissive').onChange(function(value) {
                _this12.materials.hat.emissive.setStyle(value);
            });
            f1.addColor(settings, 'noseColor').onChange(function(value) {
                _this12.materials.nose.color.setStyle(value);
            });
            f1.addColor(settings, 'noseEmissive').onChange(function(value) {
                _this12.materials.nose.emissive.setStyle(value);
            });
            f1.addColor(settings, 'bodyColor').onChange(function(value) {
                _this12.materials.body.color.setStyle(value);
            });
            f1.addColor(settings, 'bodyEmissive').onChange(function(value) {
                _this12.materials.body.emissive.setStyle(value);
            });
            f1.addColor(settings, 'armsColor').onChange(function(value) {
                _this12.materials.arms.color.setStyle(value);
            });
            f1.addColor(settings, 'handsColor').onChange(function(value) {
                _this12.materials.hands.color.setStyle(value);
            });
            f1.addColor(settings, 'handsEmissive').onChange(function(value) {
                _this12.materials.hands.emissive.setStyle(value);
            });
            f1.addColor(settings, 'legsColor').onChange(function(value) {
                _this12.materials.legs.color.setStyle(value);
            });
            f1.addColor(settings, 'shoeColor').onChange(function(value) {
                _this12.materials.shoe.color.setStyle(value);
            });
            f1.addColor(settings, 'shoeEmissive').onChange(function(value) {
                _this12.materials.shoe.emissive.setStyle(value);
            });
            f1.addColor(settings, 'beardColor').onChange(function(value) {
                _this12.headMesh.material.uniforms.diffuse.value = new THREE.Color().setStyle(value);
            });
            f1.addColor(settings, 'beardEmissive').onChange(function(value) {
                _this12.headMesh.material.uniforms.emissive.value = new THREE.Color().setStyle(value);
            });
            f1.addColor(settings, 'shadowColor').onChange(function(value) {
                _this12.floor.material.color.setStyle(value);
            });
            f1.addColor(settings, 'springColor').onChange(function(value) {
                _this12.springMesh.material.uniforms.color.value = new THREE.Color().setStyle(value);
            });
            var giftSizesFolder = this.gui.addFolder('Gift Colors');
            giftSizesFolder.addColor(settings, 'smallLidColor').onChange(function(value) {
                _this12.materials.giftSmallLid.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'smallLidEmissive').onChange(function(value) {
                _this12.materials.giftSmallLid.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'smallBoxColor').onChange(function(value) {
                _this12.materials.giftSmallBox.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'smallBoxEmissive').onChange(function(value) {
                _this12.materials.giftSmallBox.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'mediumLidColor').onChange(function(value) {
                _this12.materials.giftMediumLid.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'mediumLidEmissive').onChange(function(value) {
                _this12.materials.giftMediumLid.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'mediumBoxColor').onChange(function(value) {
                _this12.materials.giftMediumBox.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'mediumBoxEmissive').onChange(function(value) {
                _this12.materials.giftMediumBox.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'stripedLidColor').onChange(function(value) {
                _this12.materials.giftStripedLid.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'stripedLidEmissive').onChange(function(value) {
                _this12.materials.giftStripedLid.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'stripedBoxColor').onChange(function(value) {
                _this12.materials.giftStripedBox.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'stripedBoxEmissive').onChange(function(value) {
                _this12.materials.giftStripedBox.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'dottedLidColor').onChange(function(value) {
                _this12.materials.giftDottedLid.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'dottedLidEmissive').onChange(function(value) {
                _this12.materials.giftDottedLid.emissive.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'dottedBoxColor').onChange(function(value) {
                _this12.materials.giftDottedBox.color.setStyle(value);
            });
            giftSizesFolder.addColor(settings, 'dottedBoxEmissive').onChange(function(value) {
                _this12.materials.giftDottedBox.emissive.setStyle(value);
            });
            var sizesFolder = this.gui.addFolder('Sizes');
            sizesFolder.add(settings, 'limbsWidth', 0, 0.2);
            sizesFolder.add(settings, 'giftSize', 0.5, 2);
            sizesFolder.add(settings, 'headSize', 1.0, 1.5).step(0.01).onChange(function(value) {
                _this12._headModel.scale.setScalar(value);
            });
            sizesFolder.add(settings, 'headPositionY', -.5, .5).step(0.01).onChange(function(value) {
                _this12._headModel.position.y = value;
            });
            var physicsFolder = this.gui.addFolder('Physics');
            physicsFolder.add(settings, 'springRestLength', 0, 10).onChange(function(value) {
                _this12.spring.restLength = Number(value);
            });
            physicsFolder.add(settings, 'springStiffness', 0, 500).onChange(function(value) {
                _this12.spring.stiffness = Number(value);
            });
            physicsFolder.add(settings, 'springDamping', 0, 10).onChange(function(value) {
                _this12.spring.damping = Number(value);
            });
            physicsFolder.add(settings, 'headMass', 0, 10).step(1).onChange(function(value) {
                _this12.doll.head.mass = Number(value);
            });
            physicsFolder.add(settings, 'bodyMass', 0, 10).step(1).onChange(function(value) {
                _this12.doll.upperBody.mass = Number(value);
            });
            physicsFolder.add(settings, 'legsMass', 0, 10).step(1).onChange(function(value) {
                _this12.doll.upperLeftLeg.mass = Number(value);
                _this12.doll.upperRightLeg.mass = Number(value);
                _this12.doll.lowerLeftLeg.mass = Number(value);
                _this12.doll.lowerRightLeg.mass = Number(value);
                _this12.doll.rightFoot.mass = Number(value);
                _this12.doll.leftFoot.mass = Number(value);
            });
            physicsFolder.add(settings, 'armsMass', 0, 10).step(1).onChange(function(value) {
                _this12.doll.upperLeftArm.mass = Number(value);
                _this12.doll.upperRightArm.mass = Number(value);
                _this12.doll.lowerLeftArm.mass = Number(value);
                _this12.doll.lowerRightArm.mass = Number(value);
                _this12.doll.rightHand.mass = Number(value);
                _this12.doll.leftHand.mass = Number(value);
            });
            physicsFolder.add(settings, 'airDrag', 0, .9).step(.1).onChange(function(value) {
                _this12.doll.head.linearDamping = Number(value);
                _this12.doll.upperBody.linearDamping = _this12.doll.upperBody.angularDamping = Number(value);
                _this12.doll.upperLeftArm.linearDamping = _this12.doll.upperLeftArm.angularDamping = Number(value);
                _this12.doll.upperRightArm.linearDamping = _this12.doll.upperRightArm.angularDamping = Number(value);
                _this12.doll.lowerLeftArm.linearDamping = _this12.doll.lowerLeftArm.angularDamping = Number(value);
                _this12.doll.lowerRightArm.linearDamping = _this12.doll.lowerRightArm.angularDamping = Number(value);
                _this12.doll.upperLeftLeg.linearDamping = _this12.doll.upperLeftLeg.angularDamping = Number(value);
                _this12.doll.upperRightLeg.linearDamping = _this12.doll.upperRightLeg.angularDamping = Number(value);
                _this12.doll.lowerLeftLeg.linearDamping = _this12.doll.lowerLeftLeg.angularDamping = Number(value);
                _this12.doll.lowerRightLeg.linearDamping = _this12.doll.lowerRightLeg.angularDamping = Number(value);
                _this12.doll.leftFoot.linearDamping = _this12.doll.leftFoot.angularDamping = Number(value);
                _this12.doll.rightFoot.linearDamping = _this12.doll.rightFoot.angularDamping = Number(value);
                _this12.doll.leftHand.linearDamping = _this12.doll.leftHand.angularDamping = Number(value);
                _this12.doll.rightHand.linearDamping = _this12.doll.rightHand.angularDamping = Number(value);
            });
            physicsFolder.add(settings, 'headAngularDamping', 0, .9).step(.1).onChange(function(value) {
                _this12.doll.head.angularDamping = Number(value);
            });
            physicsFolder.add(settings, 'beardGravity', 0, 1).step(.1).onChange(function(value) {
                _this12.headMesh.config.gravity = Number(value);
            });
            this.gui.add(settings, 'debug').onChange(function(debug) {
                _this12.initDebug(debug);
            });
            this.gui.add(settings, 'zoomEnabled').onChange(function(value) {
                _this12.controls.enableZoom = value;
            });
            this.gui.add(settings, 'rotateEnabled').onChange(function(value) {
                _this12.controls.enableRotate = value;
            });
        }
    }]);
    return RagdollSanta;
} ();
function createDottedGift() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    size *= 0.8;
    var gift = new THREE.Object3D();
    var height = size;
    var width = size;
    var geometry = new THREE.BoxGeometry(size, height, width);
    var box = new THREE.Mesh(geometry, MATERIALS.giftDottedBox);
    gift.add(box);
    var geometry = new THREE.BoxGeometry(size * 1.04, size * 0.25, width * 1.04);
    var lid = new THREE.Mesh(geometry, MATERIALS.giftDottedLid);
    lid.position.set(0, height / 2 + -size * 0.25 / 2 * 0.99, 0);
    gift.add(lid);
    if (!dotsTexture) {
        dotsTexture = new THREE.Texture();
        var url = window.URL && window.URL.createObjectURL(ASSETS.getResult('giftwrap-dots', true));
        var image = new Image();
        image.src = url;
        image.onload = function() {
            dotsTexture.image = image;
            dotsTexture.wrapS = THREE.RepeatWrapping;
            dotsTexture.wrapT = THREE.RepeatWrapping;
            dotsTexture.repeat.set(1, 1);
            dotsTexture.anisotropy = MAX_ANISOTROPY;
            dotsTexture.needsUpdate = true;
            box.material.map = dotsTexture;
            box.material.needsUpdate = true;
        };
    } else {
        box.material.map = dotsTexture;
        box.material.needsUpdate = true;
    }
    box.castShadow = true;
    return {
        mesh: gift,
        sizeX: size,
        sizeY: height,
        sizeZ: width
    };
}
function createStripedGift() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    size *= 1.2;
    var gift = new THREE.Object3D();
    var height = size * 0.7;
    var width = size * 0.8;
    var ribbonWidth = size * 0.15;
    var geometry = new THREE.BoxGeometry(size, height, width);
    var material = new THREE.MeshLambertMaterial({
        color: 0xffffff,
        map: null
    });
    var box = new THREE.Mesh(geometry, MATERIALS.giftStripedBox);
    gift.add(box);
    var geometry = new THREE.BoxGeometry(size * 1.02, size * 0.25, width * 1.02);
    var lid = new THREE.Mesh(geometry, MATERIALS.giftStripedLid);
    lid.position.set(0, height / 2 - size * 0.25 / 2 * 0.99, 0);
    gift.add(lid);
    var materials = [new THREE.MeshLambertMaterial({
        color: 0xFFD500,
        emissive: 0x382F14,
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: 0
    })];
    var geometry = new THREE.BoxGeometry(ribbonWidth, height * 1.02, width * 1.021);
    geometry.faces[0].materialIndex = 1;
    geometry.faces[1].materialIndex = 1;
    geometry.faces[2].materialIndex = 1;
    geometry.faces[3].materialIndex = 1;
    geometry.faces[4].materialIndex = 0;
    geometry.faces[5].materialIndex = 0;
    geometry.faces[6].materialIndex = 0;
    geometry.faces[7].materialIndex = 0;
    geometry.faces[8].materialIndex = 0;
    geometry.faces[9].materialIndex = 0;
    geometry.faces[10].materialIndex = 0;
    geometry.faces[11].materialIndex = 0;
    geometry.sortFacesByMaterialIndex();
    var ribbon1 = new THREE.Mesh(geometry, materials);
    ribbon1.position.set(0, 0, 0);
    gift.add(ribbon1);
    var geometry = new THREE.BoxGeometry(size * 1.021, height * 1.021, ribbonWidth);
    geometry.faces[0].materialIndex = 0;
    geometry.faces[1].materialIndex = 0;
    geometry.faces[2].materialIndex = 0;
    geometry.faces[3].materialIndex = 0;
    geometry.faces[4].materialIndex = 0;
    geometry.faces[5].materialIndex = 0;
    geometry.faces[6].materialIndex = 0;
    geometry.faces[7].materialIndex = 0;
    geometry.faces[8].materialIndex = 1;
    geometry.faces[9].materialIndex = 1;
    geometry.faces[10].materialIndex = 1;
    geometry.faces[11].materialIndex = 1;
    geometry.sortFacesByMaterialIndex();
    var ribbon2 = new THREE.Mesh(geometry, materials);
    ribbon2.position.set(0, 0, 0);
    gift.add(ribbon2);
    if (!stripedTexture) {
        stripedTexture = new THREE.Texture();
        var url = window.URL && window.URL.createObjectURL(ASSETS.getResult('giftwrap-stripes', true));
        var image = new Image();
        image.src = url;
        image.onload = function() {
            stripedTexture.image = image;
            stripedTexture.needsUpdate = true;
            box.material.map = stripedTexture;
            box.material.needsUpdate = true;
        };
    } else {
        box.material.map = stripedTexture;
        box.material.needsUpdate = true;
    }
    box.castShadow = true;
    return {
        mesh: gift,
        sizeX: size,
        sizeY: height,
        sizeZ: width
    };
}
function createGreenGift() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    size *= 1;
    var gift = new THREE.Object3D();
    var height = size * 0.6;
    var width = size * 0.8;
    var ribbonWidth = size * 0.15;
    var geometry = new THREE.BoxGeometry(size, height, width);
    var box = new THREE.Mesh(geometry, MATERIALS.giftMediumBox);
    gift.add(box);
    var geometry = new THREE.BoxGeometry(size * 1.05, size * 0.15, width * 1.05);
    var lid = new THREE.Mesh(geometry, MATERIALS.giftMediumLid);
    lid.position.set(0, height / 2 - size * 0.15 / 2 * 0.99, 0);
    gift.add(lid);
    var materials = [new THREE.MeshLambertMaterial({
        color: 0xEF8B8A,
        emissive: 0x371616,
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: 0
    })];
    var geometry = new THREE.BoxGeometry(ribbonWidth, height * 1.02, width * 1.06);
    geometry.faces[0].materialIndex = 1;
    geometry.faces[1].materialIndex = 1;
    geometry.faces[2].materialIndex = 1;
    geometry.faces[3].materialIndex = 1;
    geometry.faces[4].materialIndex = 0;
    geometry.faces[5].materialIndex = 0;
    geometry.faces[6].materialIndex = 0;
    geometry.faces[7].materialIndex = 0;
    geometry.faces[8].materialIndex = 0;
    geometry.faces[9].materialIndex = 0;
    geometry.faces[10].materialIndex = 0;
    geometry.faces[11].materialIndex = 0;
    geometry.sortFacesByMaterialIndex();
    var ribbon1 = new THREE.Mesh(geometry, materials);
    ribbon1.position.set(0, 0, 0);
    gift.add(ribbon1);
    var geometry = new THREE.BoxGeometry(size * 1.051, height * 1.02, ribbonWidth);
    geometry.faces[0].materialIndex = 0;
    geometry.faces[1].materialIndex = 0;
    geometry.faces[2].materialIndex = 0;
    geometry.faces[3].materialIndex = 0;
    geometry.faces[4].materialIndex = 0;
    geometry.faces[5].materialIndex = 0;
    geometry.faces[6].materialIndex = 0;
    geometry.faces[7].materialIndex = 0;
    geometry.faces[8].materialIndex = 1;
    geometry.faces[9].materialIndex = 1;
    geometry.faces[10].materialIndex = 1;
    geometry.faces[11].materialIndex = 1;
    geometry.sortFacesByMaterialIndex();
    var ribbon2 = new THREE.Mesh(geometry, materials);
    ribbon2.position.set(0, 0, 0);
    gift.add(ribbon2);
    box.castShadow = true;
    return {
        mesh: gift,
        sizeX: size,
        sizeY: height,
        sizeZ: width
    };
}
function createSmallGift() {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    size *= 0.5;
    var gift = new THREE.Object3D();
    var height = size * 0.85;
    var width = size * 1;
    var ribbonWidth = size * 0.15;
    var lidHeight = size * 0.4;
    var geometry = new THREE.BoxGeometry(size, height, width);
    var box = new THREE.Mesh(geometry, MATERIALS.giftSmallBox);
    gift.add(box);
    var geometry = new THREE.BoxGeometry(size * 1.05, lidHeight, width * 1.05);
    var lid = new THREE.Mesh(geometry, MATERIALS.giftSmallLid);
    lid.position.set(0, height / 2 - lidHeight / 2 * 0.99, 0);
    gift.add(lid);
    var materials = [new THREE.MeshLambertMaterial({
        color: 0x4f5eab,
        side: THREE.DoubleSide
    }), new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: 0
    })];
    var geometry = new THREE.BoxGeometry(ribbonWidth, height * 1.02, width * 1.06);
    geometry.faces[0].materialIndex = 1;
    geometry.faces[1].materialIndex = 1;
    geometry.faces[2].materialIndex = 1;
    geometry.faces[3].materialIndex = 1;
    geometry.faces[4].materialIndex = 0;
    geometry.faces[5].materialIndex = 0;
    geometry.faces[6].materialIndex = 0;
    geometry.faces[7].materialIndex = 0;
    geometry.faces[8].materialIndex = 0;
    geometry.faces[9].materialIndex = 0;
    geometry.faces[10].materialIndex = 0;
    geometry.faces[11].materialIndex = 0;
    geometry.sortFacesByMaterialIndex();
    var ribbon1 = new THREE.Mesh(geometry, materials);
    ribbon1.position.set(0, 0, 0);
    gift.add(ribbon1);
    var geometry = new THREE.BoxGeometry(size * 1.051, height * 1.02, ribbonWidth);
    geometry.faces[0].materialIndex = 0;
    geometry.faces[1].materialIndex = 0;
    geometry.faces[2].materialIndex = 0;
    geometry.faces[3].materialIndex = 0;
    geometry.faces[4].materialIndex = 0;
    geometry.faces[5].materialIndex = 0;
    geometry.faces[6].materialIndex = 0;
    geometry.faces[7].materialIndex = 0;
    geometry.faces[8].materialIndex = 1;
    geometry.faces[9].materialIndex = 1;
    geometry.faces[10].materialIndex = 1;
    geometry.faces[11].materialIndex = 1;
    geometry.sortFacesByMaterialIndex();
    var ribbon2 = new THREE.Mesh(geometry, materials);
    ribbon2.position.set(0, 0, 0);
    gift.add(ribbon2);
    box.castShadow = true;
    return {
        mesh: gift,
        sizeX: size,
        sizeY: height,
        sizeZ: width
    };
}
var giftCount = 0;
var Gift = function() {
    function Gift(scene, world) {
        var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        spawnPosition = _ref.spawnPosition;
        var giftType = arguments[3];
        _classCallCheck(this, Gift);
        this.scene = scene;
        this.world = world;
        this.giftId = giftCount++;
        this.spawnPosition = spawnPosition || new THREE.Vector3(0, 0, 0);
        var giftTypes = [createGreenGift, createGreenGift, createStripedGift, createSmallGift, createSmallGift, createDottedGift, createDottedGift];
        giftType = giftType || giftTypes[this.randomIntFromInterval(0, giftTypes.length - 1)];
        while (Gift.prevGiftType === giftType) {
            giftType = giftTypes[this.randomIntFromInterval(0, giftTypes.length - 1)];
        }
        Gift.prevGiftType = giftType;
        this.gift = giftType(settings.giftSize);
        this.mesh = this.gift.mesh;
        this.sizeX = this.gift.sizeX;
        this.sizeY = this.gift.sizeY;
        this.sizeZ = this.gift.sizeZ;
        this.mesh.position.copy(this.spawnPosition);
        this.active = false;
        this.init();
    }
    _createClass(Gift, [{
        key: 'randomIntFromInterval',
        value: function randomIntFromInterval(min, max) {
            return Math.floor(Math.random() * (max - min + 1) + min);
        }
    },
    {
        key: 'setPosition',
        value: function setPosition(pos) {
            var _this13 = this;
            this.body.position.copy(pos);
            this.mesh.scale.setScalar(0.01);
            this.tween = {
                scale: 0.01
            };
            TweenMax.to(this.tween, 1.2, {
                scale: 1,
                ease: Elastic.easeOut.config(1, 0.2),
                delay: 0,
                onComplete: function onComplete() {
                    _this13.tween = false;
                }
            });
            this.world.addBody(this.body);
            this.mesh.visible = true;
            this.active = true;
        }
    },
    {
        key: 'init',
        value: function init() {
            var _this14 = this;
            var geom = this.mesh.geometry;
            var shape = new CANNON.Box(new CANNON.Vec3(this.sizeX / 2, this.sizeY / 2, this.sizeZ / 2));
            var mass = 20 + (this.sizeX + this.sizeY + this.sizeZ) * 0.5;
            this.body = new CANNON.Body({
                mass: mass
            });
            this.body.linearDamping = this.body.angularDamping = GIFT_DAMPING;
            this.body.addShape(shape);
            this.mesh.userData.body = this.body;
            this.scene.add(this.mesh);
            this.mesh.visible = false;
            this.body.userType = 'gift';
            this.body.position.copy(this.mesh.position);
            this.body.quaternion.copy(this.mesh.quaternion);
            this.mesh.castShadow = true;
            this.mesh.receiveShadow = true;
            var onCollide = function onCollide(e) {
                if (e.body.id === 1) {
                    if (!_this14.hasPlayedContact) {
                        var vol = THREE.Math.clamp(THREE.Math.mapLinear(Math.abs(e.target.velocity.length()), 0, 10, 0, 1), 0, 1);
                        SOUNDS.playRandomThud(vol);
                        _this14.hasPlayedContact = true;
                    }
                }
            };
            this.body.addEventListener('collide', onCollide);
        }
    },
    {
        key: 'update',
        value: function update(t) {
            if (!this.active) return;
            if (this.body && this.mesh) {
                this.mesh.position.copy(this.body.position);
                this.mesh.quaternion.copy(this.body.quaternion);
            }
            if (this.tween) {
                this.mesh.scale.setScalar(this.tween.scale);
            }
        }
    }]);
    return Gift;
} ();

      // var demo = new CANNON.Demo();

      // var postStepHandler;

      // demo.addScene("Tween box",function(){
      //   var world = demo.getWorld();

      //   // Inputs
      //   var startPosition = new CANNON.Vec3(5, 0, 2);
      //   var endPosition = new CANNON.Vec3(-5, 0, 2);
      //   var tweenTime = 3; // seconds

      //   var body = new CANNON.Body({
      //     mass: 0,
      //     type: CANNON.Body.KINEMATIC,
      //     position: startPosition
      //   });
      //   body.addShape(new CANNON.Box(new CANNON.Vec3(1,1,1)));
      //   world.add(body);
      //   demo.addVisual(body);

      //   if(postStepHandler){
      //     world.removeEventListener('postStep', postStepHandler);
      //   }

      //   // Compute direction vector and get total length of the path
      //   var direction = new CANNON.Vec3();
      //   endPosition.vsub(startPosition, direction);
      //   var totalLength = direction.length();
      //   direction.normalize();

      //   var speed = totalLength / tweenTime;
      //   direction.scale(speed, body.velocity);

      //   // Save the start time
      //   var startTime = world.time;

      //   var offset = new CANNON.Vec3();

      //   postStepHandler = function(){

      //     // Progress is a number where 0 is at start position and 1 is at end position
      //     var progress = (world.time - startTime) / tweenTime;

      //     if(progress < 1){
      //       direction.scale(progress * totalLength, offset);
      //       startPosition.vadd(offset, body.position);
      //     } else {
      //       body.velocity.set(0,0,0);
      //       body.position.copy(endPosition);
      //       world.removeEventListener('postStep', postStepHandler);
      //       postStepHandler = null;
      //     }
      //   }

      //   world.addEventListener('postStep', postStepHandler);
      // });

      // demo.start();

    //===============

        // var demo = new CANNON.Demo();

        // demo.addScene("Bunny",function(){

        //     var world = demo.getWorld();

        //     world.gravity.set(0,0,-20);
        //     world.broadphase = new CANNON.NaiveBroadphase();
        //     world.solver.iterations = 20;
        //     world.defaultContactMaterial.contactEquationStiffness = 1e10;
        //     world.defaultContactMaterial.contactEquationRelaxation = 10;

        //     var bunnyBody = new CANNON.Body({ mass: 1 });
        //     for(var i=0; i<bunny.length; i++){

        //         var rawVerts = bunny[i].verts;
        //         var rawFaces = bunny[i].faces;
        //         var rawOffset = bunny[i].offset;

        //         var verts=[], faces=[], offset;

        //         // Get vertices
        //         for(var j=0; j<rawVerts.length; j+=3){
        //             verts.push(new CANNON.Vec3( rawVerts[j]  ,
        //                                         rawVerts[j+1],
        //                                         rawVerts[j+2]));
        //         }

        //         // Get faces
        //         for(var j=0; j<rawFaces.length; j+=3){
        //             faces.push([rawFaces[j],rawFaces[j+1],rawFaces[j+2]]);
        //         }

        //         // Get offset
        //         offset = new CANNON.Vec3(rawOffset[0],rawOffset[1],rawOffset[2]);

        //         // Construct polyhedron
        //         var bunnyPart = new CANNON.ConvexPolyhedron(verts,faces);

        //         // Add to compound
        //         bunnyBody.addShape(bunnyPart,offset);
        //     }

        //     // Create body
        //     bunnyBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2);
        //     var z180 = new CANNON.Quaternion();
        //     z180.setFromAxisAngle(new CANNON.Vec3(0,0,1),Math.PI);
        //     bunnyBody.quaternion = z180.mult(bunnyBody.quaternion);
        //     world.add(bunnyBody);
        //     demo.addVisual(bunnyBody);

        //     // ground plane
        //     var groundShape = new CANNON.Plane();
        //     var groundBody = new CANNON.Body({ mass: 0 });
        //     groundBody.addShape(groundShape);
        //     groundBody.position.set(0,0,-5);
        //     world.add(groundBody);
        //     demo.addVisual(groundBody);

        // });

        // demo.start();

        // 